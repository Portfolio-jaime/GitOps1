{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitOps Demo Project \u00b6 Proyecto de demostraci\u00f3n que implementa un pipeline completo de GitOps utilizando Kubernetes, GitHub Actions y ArgoCD. \ud83c\udfaf Objetivo \u00b6 Demostrar la implementaci\u00f3n de un flujo de trabajo GitOps completo para una aplicaci\u00f3n web simple, incluyendo: - Automatizaci\u00f3n de CI/CD con GitHub Actions - Containerizaci\u00f3n con Docker - Despliegue en Kubernetes - Gesti\u00f3n de configuraci\u00f3n con ArgoCD \ud83c\udfd7\ufe0f Arquitectura \u00b6 1 2 3 4 5 6 graph LR A[C\u00f3digo Fuente] --> B[GitHub Actions] B --> C[Docker Registry] C --> D[ArgoCD] D --> E[Kubernetes Cluster] E --> F[Aplicaci\u00f3n Desplegada] Vista de la Aplicaci\u00f3n en Kubernetes \u00b6 Servicios y Networking \u00b6 \ud83d\udce6 Componentes \u00b6 1. Aplicaci\u00f3n Web \u00b6 Tecnolog\u00eda : HTML est\u00e1tico Contenedor : Docker con Nginx Puerto : 80 2. CI/CD Pipeline \u00b6 Plataforma : GitHub Actions Trigger : Push a main branch Acciones : Build de imagen Docker Push a registry Actualizaci\u00f3n de manifiestos K8s 3. Infraestructura Kubernetes \u00b6 Deployment : Gesti\u00f3n de pods de la aplicaci\u00f3n Service : Exposici\u00f3n de la aplicaci\u00f3n Ingress : Routing externo (opcional) 4. GitOps con ArgoCD \u00b6 Monitoreo : Repositorio de manifiestos Sincronizaci\u00f3n : Autom\u00e1tica Rollback : Capacidad de volver a versiones anteriores \ud83d\ude80 Estructura del Proyecto \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 GitOps/ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 cd.yml # Pipeline CI/CD \u251c\u2500\u2500 Docker/ \u2502 \u251c\u2500\u2500 Dockerfile # Imagen de la aplicaci\u00f3n \u2502 \u2514\u2500\u2500 index.html # Aplicaci\u00f3n web \u251c\u2500\u2500 Kubernetes/ \u2502 \u251c\u2500\u2500 deployment.yaml # Deployment de K8s \u2502 \u2514\u2500\u2500 service.yaml # Service de K8s \u251c\u2500\u2500 doc/ # Documentaci\u00f3n y diagramas \u2514\u2500\u2500 README.md \u26a1 Quick Start \u00b6 Prerrequisitos \u00b6 Cluster de Kubernetes kubectl configurado ArgoCD instalado Acceso a Docker Registry 1. Clonar Repositorio \u00b6 1 2 git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps 2. Desplegar en Kubernetes \u00b6 1 2 3 4 5 # Aplicar manifiestos kubectl apply -f Kubernetes/ # Verificar despliegue kubectl get pods,svc 3. Configurar ArgoCD \u00b6 1 2 3 4 5 6 # Crear aplicaci\u00f3n en ArgoCD argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace default \ud83d\udd27 Configuraci\u00f3n CI/CD \u00b6 El pipeline de GitHub Actions automatiza: Build : Construcci\u00f3n de imagen Docker Test : Validaciones de seguridad y calidad Push : Subida a Docker Registry Deploy : Actualizaci\u00f3n de manifiestos K8s Variables de Entorno Requeridas \u00b6 1 2 3 4 DOCKER_REGISTRY : registry.example.com DOCKER_USERNAME : user DOCKER_PASSWORD : password KUBECONFIG : base64-encoded-kubeconfig \ud83d\udd04 Flujo GitOps \u00b6 1. Desarrollo \u00b6 1 2 3 4 5 6 7 # Modificar aplicaci\u00f3n echo \"<h1>Nueva versi\u00f3n</h1>\" > Docker/index.html # Commit y push git add . git commit -m \"feat: nueva versi\u00f3n de la aplicaci\u00f3n\" git push origin main 2. CI/CD Autom\u00e1tico \u00b6 GitHub Actions detecta el cambio Construye nueva imagen Docker Actualiza manifiestos con nueva imagen ArgoCD detecta cambios en Git 3. Despliegue \u00b6 ArgoCD sincroniza autom\u00e1ticamente Kubernetes aplica nuevos manifiestos Aplicaci\u00f3n se actualiza sin downtime \ud83d\udcca Monitoreo \u00b6 Estado de la Aplicaci\u00f3n \u00b6 1 2 3 4 5 6 7 8 # Verificar pods kubectl get pods -l app = gitops-demo # Ver logs kubectl logs -l app = gitops-demo --tail = 50 # Estado del servicio kubectl get svc gitops-demo ArgoCD Dashboard \u00b6 Acceder a la UI de ArgoCD Verificar estado de sincronizaci\u00f3n Revisar historial de despliegues \ud83d\udee0\ufe0f Troubleshooting \u00b6 Problemas Comunes \u00b6 1. Imagen no se actualiza \u00b6 1 2 3 4 5 # Verificar el tag de la imagen kubectl describe deployment gitops-demo # Forzar actualizaci\u00f3n kubectl rollout restart deployment/gitops-demo 2. ArgoCD no sincroniza \u00b6 1 2 3 4 5 # Verificar configuraci\u00f3n de la app argocd app get gitops-demo # Sincronizaci\u00f3n manual argocd app sync gitops-demo 3. Problemas de red \u00b6 1 2 3 4 5 # Verificar service y endpoints kubectl get svc,endpoints # Probar conectividad kubectl port-forward svc/gitops-demo 8080 :80 \ud83c\udfaf Casos de Uso \u00b6 Entornos de Desarrollo \u00b6 Desarrollo Local : Docker Compose para desarrollo Testing : Namespace dedicado en K8s Staging : Entorno de pre-producci\u00f3n Producci\u00f3n \u00b6 Blue/Green : Despliegues sin downtime Canary : Despliegues graduales Rollback : Vuelta r\u00e1pida a versiones anteriores \ud83d\udcc8 M\u00e9tricas y Observabilidad \u00b6 M\u00e9tricas de Aplicaci\u00f3n \u00b6 Tiempo de respuesta Throughput de requests Errores HTTP M\u00e9tricas de Infraestructura \u00b6 Uso de CPU y memoria Estado de pods Latencia de red \ud83d\udd10 Seguridad \u00b6 Pr\u00e1cticas Implementadas \u00b6 Im\u00e1genes : Scan de vulnerabilidades Secrets : Gesti\u00f3n segura con K8s secrets RBAC : Control de acceso en ArgoCD Network Policies : Seguridad de red \ud83d\udcda Recursos Adicionales \u00b6 Gu\u00eda de Prerequisites Setup Detallado Arquitectura Completa Configuraci\u00f3n de ArgoCD Troubleshooting \ud83d\udc65 Contribuir \u00b6 Este proyecto es parte del portfolio de DevOps y est\u00e1 abierto a contribuciones: Fork del repositorio Crear feature branch Commit cambios Push a la branch Crear Pull Request \ud83d\udcde Contacto \u00b6 Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Proyecto de Demostraci\u00f3n GitOps - DevOps Engineering Portfolio","title":"Home"},{"location":"#gitops-demo-project","text":"Proyecto de demostraci\u00f3n que implementa un pipeline completo de GitOps utilizando Kubernetes, GitHub Actions y ArgoCD.","title":"GitOps Demo Project"},{"location":"#objetivo","text":"Demostrar la implementaci\u00f3n de un flujo de trabajo GitOps completo para una aplicaci\u00f3n web simple, incluyendo: - Automatizaci\u00f3n de CI/CD con GitHub Actions - Containerizaci\u00f3n con Docker - Despliegue en Kubernetes - Gesti\u00f3n de configuraci\u00f3n con ArgoCD","title":"\ud83c\udfaf Objetivo"},{"location":"#arquitectura","text":"1 2 3 4 5 6 graph LR A[C\u00f3digo Fuente] --> B[GitHub Actions] B --> C[Docker Registry] C --> D[ArgoCD] D --> E[Kubernetes Cluster] E --> F[Aplicaci\u00f3n Desplegada]","title":"\ud83c\udfd7\ufe0f Arquitectura"},{"location":"#vista-de-la-aplicacion-en-kubernetes","text":"","title":"Vista de la Aplicaci\u00f3n en Kubernetes"},{"location":"#servicios-y-networking","text":"","title":"Servicios y Networking"},{"location":"#componentes","text":"","title":"\ud83d\udce6 Componentes"},{"location":"#1-aplicacion-web","text":"Tecnolog\u00eda : HTML est\u00e1tico Contenedor : Docker con Nginx Puerto : 80","title":"1. Aplicaci\u00f3n Web"},{"location":"#2-cicd-pipeline","text":"Plataforma : GitHub Actions Trigger : Push a main branch Acciones : Build de imagen Docker Push a registry Actualizaci\u00f3n de manifiestos K8s","title":"2. CI/CD Pipeline"},{"location":"#3-infraestructura-kubernetes","text":"Deployment : Gesti\u00f3n de pods de la aplicaci\u00f3n Service : Exposici\u00f3n de la aplicaci\u00f3n Ingress : Routing externo (opcional)","title":"3. Infraestructura Kubernetes"},{"location":"#4-gitops-con-argocd","text":"Monitoreo : Repositorio de manifiestos Sincronizaci\u00f3n : Autom\u00e1tica Rollback : Capacidad de volver a versiones anteriores","title":"4. GitOps con ArgoCD"},{"location":"#estructura-del-proyecto","text":"1 2 3 4 5 6 7 8 9 10 11 12 GitOps/ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 cd.yml # Pipeline CI/CD \u251c\u2500\u2500 Docker/ \u2502 \u251c\u2500\u2500 Dockerfile # Imagen de la aplicaci\u00f3n \u2502 \u2514\u2500\u2500 index.html # Aplicaci\u00f3n web \u251c\u2500\u2500 Kubernetes/ \u2502 \u251c\u2500\u2500 deployment.yaml # Deployment de K8s \u2502 \u2514\u2500\u2500 service.yaml # Service de K8s \u251c\u2500\u2500 doc/ # Documentaci\u00f3n y diagramas \u2514\u2500\u2500 README.md","title":"\ud83d\ude80 Estructura del Proyecto"},{"location":"#quick-start","text":"","title":"\u26a1 Quick Start"},{"location":"#prerrequisitos","text":"Cluster de Kubernetes kubectl configurado ArgoCD instalado Acceso a Docker Registry","title":"Prerrequisitos"},{"location":"#1-clonar-repositorio","text":"1 2 git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps","title":"1. Clonar Repositorio"},{"location":"#2-desplegar-en-kubernetes","text":"1 2 3 4 5 # Aplicar manifiestos kubectl apply -f Kubernetes/ # Verificar despliegue kubectl get pods,svc","title":"2. Desplegar en Kubernetes"},{"location":"#3-configurar-argocd","text":"1 2 3 4 5 6 # Crear aplicaci\u00f3n en ArgoCD argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace default","title":"3. Configurar ArgoCD"},{"location":"#configuracion-cicd","text":"El pipeline de GitHub Actions automatiza: Build : Construcci\u00f3n de imagen Docker Test : Validaciones de seguridad y calidad Push : Subida a Docker Registry Deploy : Actualizaci\u00f3n de manifiestos K8s","title":"\ud83d\udd27 Configuraci\u00f3n CI/CD"},{"location":"#variables-de-entorno-requeridas","text":"1 2 3 4 DOCKER_REGISTRY : registry.example.com DOCKER_USERNAME : user DOCKER_PASSWORD : password KUBECONFIG : base64-encoded-kubeconfig","title":"Variables de Entorno Requeridas"},{"location":"#flujo-gitops","text":"","title":"\ud83d\udd04 Flujo GitOps"},{"location":"#1-desarrollo","text":"1 2 3 4 5 6 7 # Modificar aplicaci\u00f3n echo \"<h1>Nueva versi\u00f3n</h1>\" > Docker/index.html # Commit y push git add . git commit -m \"feat: nueva versi\u00f3n de la aplicaci\u00f3n\" git push origin main","title":"1. Desarrollo"},{"location":"#2-cicd-automatico","text":"GitHub Actions detecta el cambio Construye nueva imagen Docker Actualiza manifiestos con nueva imagen ArgoCD detecta cambios en Git","title":"2. CI/CD Autom\u00e1tico"},{"location":"#3-despliegue","text":"ArgoCD sincroniza autom\u00e1ticamente Kubernetes aplica nuevos manifiestos Aplicaci\u00f3n se actualiza sin downtime","title":"3. Despliegue"},{"location":"#monitoreo","text":"","title":"\ud83d\udcca Monitoreo"},{"location":"#estado-de-la-aplicacion","text":"1 2 3 4 5 6 7 8 # Verificar pods kubectl get pods -l app = gitops-demo # Ver logs kubectl logs -l app = gitops-demo --tail = 50 # Estado del servicio kubectl get svc gitops-demo","title":"Estado de la Aplicaci\u00f3n"},{"location":"#argocd-dashboard","text":"Acceder a la UI de ArgoCD Verificar estado de sincronizaci\u00f3n Revisar historial de despliegues","title":"ArgoCD Dashboard"},{"location":"#troubleshooting","text":"","title":"\ud83d\udee0\ufe0f Troubleshooting"},{"location":"#problemas-comunes","text":"","title":"Problemas Comunes"},{"location":"#1-imagen-no-se-actualiza","text":"1 2 3 4 5 # Verificar el tag de la imagen kubectl describe deployment gitops-demo # Forzar actualizaci\u00f3n kubectl rollout restart deployment/gitops-demo","title":"1. Imagen no se actualiza"},{"location":"#2-argocd-no-sincroniza","text":"1 2 3 4 5 # Verificar configuraci\u00f3n de la app argocd app get gitops-demo # Sincronizaci\u00f3n manual argocd app sync gitops-demo","title":"2. ArgoCD no sincroniza"},{"location":"#3-problemas-de-red","text":"1 2 3 4 5 # Verificar service y endpoints kubectl get svc,endpoints # Probar conectividad kubectl port-forward svc/gitops-demo 8080 :80","title":"3. Problemas de red"},{"location":"#casos-de-uso","text":"","title":"\ud83c\udfaf Casos de Uso"},{"location":"#entornos-de-desarrollo","text":"Desarrollo Local : Docker Compose para desarrollo Testing : Namespace dedicado en K8s Staging : Entorno de pre-producci\u00f3n","title":"Entornos de Desarrollo"},{"location":"#produccion","text":"Blue/Green : Despliegues sin downtime Canary : Despliegues graduales Rollback : Vuelta r\u00e1pida a versiones anteriores","title":"Producci\u00f3n"},{"location":"#metricas-y-observabilidad","text":"","title":"\ud83d\udcc8 M\u00e9tricas y Observabilidad"},{"location":"#metricas-de-aplicacion","text":"Tiempo de respuesta Throughput de requests Errores HTTP","title":"M\u00e9tricas de Aplicaci\u00f3n"},{"location":"#metricas-de-infraestructura","text":"Uso de CPU y memoria Estado de pods Latencia de red","title":"M\u00e9tricas de Infraestructura"},{"location":"#seguridad","text":"","title":"\ud83d\udd10 Seguridad"},{"location":"#practicas-implementadas","text":"Im\u00e1genes : Scan de vulnerabilidades Secrets : Gesti\u00f3n segura con K8s secrets RBAC : Control de acceso en ArgoCD Network Policies : Seguridad de red","title":"Pr\u00e1cticas Implementadas"},{"location":"#recursos-adicionales","text":"Gu\u00eda de Prerequisites Setup Detallado Arquitectura Completa Configuraci\u00f3n de ArgoCD Troubleshooting","title":"\ud83d\udcda Recursos Adicionales"},{"location":"#contribuir","text":"Este proyecto es parte del portfolio de DevOps y est\u00e1 abierto a contribuciones: Fork del repositorio Crear feature branch Commit cambios Push a la branch Crear Pull Request","title":"\ud83d\udc65 Contribuir"},{"location":"#contacto","text":"Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Proyecto de Demostraci\u00f3n GitOps - DevOps Engineering Portfolio","title":"\ud83d\udcde Contacto"},{"location":"architecture/","text":"Arquitectura del Sistema \u00b6 Visi\u00f3n General \u00b6 El proyecto GitOps implementa un pipeline completo de CI/CD utilizando GitOps como metodolog\u00eda principal. Componentes Principales \u00b6 1. Repositorio Git (GitHub) \u00b6 Funci\u00f3n : Source of truth para c\u00f3digo y configuraci\u00f3n Contenido : C\u00f3digo fuente de la aplicaci\u00f3n Manifiestos de Kubernetes Configuraci\u00f3n de CI/CD Documentaci\u00f3n 2. GitHub Actions (CI/CD Pipeline) \u00b6 Triggers : Push a branch main, Pull Requests Acciones : Build de la aplicaci\u00f3n Construcci\u00f3n de imagen Docker Push al registry Actualizaci\u00f3n de manifiestos K8s Notificaciones 3. Docker Registry (GitHub Container Registry) \u00b6 Funci\u00f3n : Almacenamiento de im\u00e1genes Docker Caracter\u00edsticas : Integraci\u00f3n nativa con GitHub Control de acceso granular Versionado autom\u00e1tico Limpieza autom\u00e1tica de im\u00e1genes antiguas 4. Kubernetes Cluster \u00b6 Funci\u00f3n : Plataforma de ejecuci\u00f3n Componentes : Deployments : Gesti\u00f3n de pods de aplicaci\u00f3n Services : Exposici\u00f3n de servicios ConfigMaps/Secrets : Configuraci\u00f3n y secretos Ingress : Routing externo 5. ArgoCD (GitOps Operator) \u00b6 Funci\u00f3n : Sincronizaci\u00f3n autom\u00e1tica Git \u2192 Kubernetes Caracter\u00edsticas : Monitoreo continuo del repositorio Detecci\u00f3n de drift de configuraci\u00f3n Rollback autom\u00e1tico en caso de fallo UI web para monitoreo RBAC integrado Flujo de Datos \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sequenceDiagram participant Dev as Developer participant Git as GitHub Repo participant GA as GitHub Actions participant CR as Container Registry participant AC as ArgoCD participant K8s as Kubernetes Dev->>Git: git push Git->>GA: Trigger Pipeline GA->>GA: Build & Test GA->>CR: Push Image GA->>Git: Update Manifests Git->>AC: Webhook/Poll AC->>K8s: Apply Changes K8s->>AC: Status Update AC->>Dev: Notification Patrones de Despliegue \u00b6 Push-based GitOps \u00b6 1 2 3 4 5 6 graph LR A[CI Pipeline] --> B[Container Registry] A --> C[Update Manifests] C --> D[Git Repository] D --> E[ArgoCD Pull] E --> F[Kubernetes Apply] Ventajas del Enfoque \u00b6 Declarativo : Estado deseado en Git Auditable : Historial completo en Git Reversible : Rollback f\u00e1cil con Git Seguro : No credenciales de cluster en CI/CD Escalable : M\u00faltiples clusters desde un repo Seguridad \u00b6 Principios Implementados \u00b6 Least Privilege : Permisos m\u00ednimos necesarios Secret Management : Kubernetes Secrets + External Secrets Image Scanning : Vulnerabilidades en pipeline Network Policies : Aislamiento de red RBAC : Control de acceso granular Flujo de Secretos \u00b6 1 2 3 4 5 graph TD A[GitHub Secrets] --> B[GitHub Actions] B --> C[Container Registry Auth] D[K8s Secrets] --> E[Application Pods] F[ArgoCD Config] --> G[Cluster Access] Monitoreo y Observabilidad \u00b6 M\u00e9tricas Clave \u00b6 Deployment Frequency : Frecuencia de despliegues Lead Time : Tiempo desde c\u00f3digo hasta producci\u00f3n MTTR : Tiempo medio de recuperaci\u00f3n Change Failure Rate : Porcentaje de fallos en cambios Stack de Observabilidad \u00b6 Logs : Fluent Bit \u2192 Elasticsearch M\u00e9tricas : Prometheus \u2192 Grafana Traces : Jaeger Alertas : AlertManager \u2192 Slack/Email Escalabilidad \u00b6 Estrategias de Escalado \u00b6 Horizontal Pod Autoscaler : Basado en CPU/Memoria Vertical Pod Autoscaler : Ajuste autom\u00e1tico de recursos Cluster Autoscaler : Escalado de nodos Custom Metrics : Escalado basado en m\u00e9tricas de aplicaci\u00f3n Multi-Environment \u00b6 1 2 3 4 5 6 7 \u251c\u2500\u2500 environments/ \u2502 \u251c\u2500\u2500 dev/ \u2502 \u2502 \u2514\u2500\u2500 kustomization.yaml \u2502 \u251c\u2500\u2500 staging/ \u2502 \u2502 \u2514\u2500\u2500 kustomization.yaml \u2502 \u2514\u2500\u2500 prod/ \u2502 \u2514\u2500\u2500 kustomization.yaml Disaster Recovery \u00b6 Estrategias \u00b6 Backup de Configuraci\u00f3n : Git como backup Multi-Region : Clusters en m\u00faltiples regiones Database Backup : Snapshots automatizados Infrastructure as Code : Terraform para recrear Runbooks : Procedimientos documentados RTO/RPO Targets \u00b6 RTO : < 30 minutos RPO : < 5 minutos SLA : 99.9% uptime","title":"Overview"},{"location":"architecture/#arquitectura-del-sistema","text":"","title":"Arquitectura del Sistema"},{"location":"architecture/#vision-general","text":"El proyecto GitOps implementa un pipeline completo de CI/CD utilizando GitOps como metodolog\u00eda principal.","title":"Visi\u00f3n General"},{"location":"architecture/#componentes-principales","text":"","title":"Componentes Principales"},{"location":"architecture/#1-repositorio-git-github","text":"Funci\u00f3n : Source of truth para c\u00f3digo y configuraci\u00f3n Contenido : C\u00f3digo fuente de la aplicaci\u00f3n Manifiestos de Kubernetes Configuraci\u00f3n de CI/CD Documentaci\u00f3n","title":"1. Repositorio Git (GitHub)"},{"location":"architecture/#2-github-actions-cicd-pipeline","text":"Triggers : Push a branch main, Pull Requests Acciones : Build de la aplicaci\u00f3n Construcci\u00f3n de imagen Docker Push al registry Actualizaci\u00f3n de manifiestos K8s Notificaciones","title":"2. GitHub Actions (CI/CD Pipeline)"},{"location":"architecture/#3-docker-registry-github-container-registry","text":"Funci\u00f3n : Almacenamiento de im\u00e1genes Docker Caracter\u00edsticas : Integraci\u00f3n nativa con GitHub Control de acceso granular Versionado autom\u00e1tico Limpieza autom\u00e1tica de im\u00e1genes antiguas","title":"3. Docker Registry (GitHub Container Registry)"},{"location":"architecture/#4-kubernetes-cluster","text":"Funci\u00f3n : Plataforma de ejecuci\u00f3n Componentes : Deployments : Gesti\u00f3n de pods de aplicaci\u00f3n Services : Exposici\u00f3n de servicios ConfigMaps/Secrets : Configuraci\u00f3n y secretos Ingress : Routing externo","title":"4. Kubernetes Cluster"},{"location":"architecture/#5-argocd-gitops-operator","text":"Funci\u00f3n : Sincronizaci\u00f3n autom\u00e1tica Git \u2192 Kubernetes Caracter\u00edsticas : Monitoreo continuo del repositorio Detecci\u00f3n de drift de configuraci\u00f3n Rollback autom\u00e1tico en caso de fallo UI web para monitoreo RBAC integrado","title":"5. ArgoCD (GitOps Operator)"},{"location":"architecture/#flujo-de-datos","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sequenceDiagram participant Dev as Developer participant Git as GitHub Repo participant GA as GitHub Actions participant CR as Container Registry participant AC as ArgoCD participant K8s as Kubernetes Dev->>Git: git push Git->>GA: Trigger Pipeline GA->>GA: Build & Test GA->>CR: Push Image GA->>Git: Update Manifests Git->>AC: Webhook/Poll AC->>K8s: Apply Changes K8s->>AC: Status Update AC->>Dev: Notification","title":"Flujo de Datos"},{"location":"architecture/#patrones-de-despliegue","text":"","title":"Patrones de Despliegue"},{"location":"architecture/#push-based-gitops","text":"1 2 3 4 5 6 graph LR A[CI Pipeline] --> B[Container Registry] A --> C[Update Manifests] C --> D[Git Repository] D --> E[ArgoCD Pull] E --> F[Kubernetes Apply]","title":"Push-based GitOps"},{"location":"architecture/#ventajas-del-enfoque","text":"Declarativo : Estado deseado en Git Auditable : Historial completo en Git Reversible : Rollback f\u00e1cil con Git Seguro : No credenciales de cluster en CI/CD Escalable : M\u00faltiples clusters desde un repo","title":"Ventajas del Enfoque"},{"location":"architecture/#seguridad","text":"","title":"Seguridad"},{"location":"architecture/#principios-implementados","text":"Least Privilege : Permisos m\u00ednimos necesarios Secret Management : Kubernetes Secrets + External Secrets Image Scanning : Vulnerabilidades en pipeline Network Policies : Aislamiento de red RBAC : Control de acceso granular","title":"Principios Implementados"},{"location":"architecture/#flujo-de-secretos","text":"1 2 3 4 5 graph TD A[GitHub Secrets] --> B[GitHub Actions] B --> C[Container Registry Auth] D[K8s Secrets] --> E[Application Pods] F[ArgoCD Config] --> G[Cluster Access]","title":"Flujo de Secretos"},{"location":"architecture/#monitoreo-y-observabilidad","text":"","title":"Monitoreo y Observabilidad"},{"location":"architecture/#metricas-clave","text":"Deployment Frequency : Frecuencia de despliegues Lead Time : Tiempo desde c\u00f3digo hasta producci\u00f3n MTTR : Tiempo medio de recuperaci\u00f3n Change Failure Rate : Porcentaje de fallos en cambios","title":"M\u00e9tricas Clave"},{"location":"architecture/#stack-de-observabilidad","text":"Logs : Fluent Bit \u2192 Elasticsearch M\u00e9tricas : Prometheus \u2192 Grafana Traces : Jaeger Alertas : AlertManager \u2192 Slack/Email","title":"Stack de Observabilidad"},{"location":"architecture/#escalabilidad","text":"","title":"Escalabilidad"},{"location":"architecture/#estrategias-de-escalado","text":"Horizontal Pod Autoscaler : Basado en CPU/Memoria Vertical Pod Autoscaler : Ajuste autom\u00e1tico de recursos Cluster Autoscaler : Escalado de nodos Custom Metrics : Escalado basado en m\u00e9tricas de aplicaci\u00f3n","title":"Estrategias de Escalado"},{"location":"architecture/#multi-environment","text":"1 2 3 4 5 6 7 \u251c\u2500\u2500 environments/ \u2502 \u251c\u2500\u2500 dev/ \u2502 \u2502 \u2514\u2500\u2500 kustomization.yaml \u2502 \u251c\u2500\u2500 staging/ \u2502 \u2502 \u2514\u2500\u2500 kustomization.yaml \u2502 \u2514\u2500\u2500 prod/ \u2502 \u2514\u2500\u2500 kustomization.yaml","title":"Multi-Environment"},{"location":"architecture/#disaster-recovery","text":"","title":"Disaster Recovery"},{"location":"architecture/#estrategias","text":"Backup de Configuraci\u00f3n : Git como backup Multi-Region : Clusters en m\u00faltiples regiones Database Backup : Snapshots automatizados Infrastructure as Code : Terraform para recrear Runbooks : Procedimientos documentados","title":"Estrategias"},{"location":"architecture/#rtorpo-targets","text":"RTO : < 30 minutos RPO : < 5 minutos SLA : 99.9% uptime","title":"RTO/RPO Targets"},{"location":"argocd/","text":"ArgoCD Configuration \u00b6 Instalaci\u00f3n y Configuraci\u00f3n \u00b6 Instalaci\u00f3n de ArgoCD \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Crear namespace kubectl create namespace argocd # Instalar ArgoCD kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Verificar instalaci\u00f3n kubectl get pods -n argocd # Esperar que todos los pods est\u00e9n listos kubectl wait --for = condition = Ready pods --all -n argocd --timeout = 300s Acceso a ArgoCD UI \u00b6 1 2 3 4 5 6 7 8 9 # Obtener password inicial del admin kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ; echo # Port forward para acceso local kubectl port-forward svc/argocd-server -n argocd 8080 :443 # Acceder en el navegador: https://localhost:8080 # Usuario: admin # Password: [obtenido del comando anterior] Configuraci\u00f3n de CLI \u00b6 1 2 3 4 5 6 7 8 9 10 # Instalar ArgoCD CLI curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd rm argocd-linux-amd64 # Login via CLI argocd login localhost:8080 # Cambiar password (opcional) argocd account update-password Configuraci\u00f3n de Aplicaci\u00f3n GitOps \u00b6 Manifest de Aplicaci\u00f3n ArgoCD \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : gitops-demo namespace : argocd labels : app.kubernetes.io/name : gitops-demo app.kubernetes.io/part-of : gitops-portfolio annotations : argocd.argoproj.io/sync-wave : \"1\" finalizers : - resources-finalizer.argocd.argoproj.io spec : project : default source : repoURL : https://github.com/Portfolio-jaime/GitOps.git targetRevision : HEAD path : Kubernetes directory : recurse : true destination : server : https://kubernetes.default.svc namespace : gitops-demo syncPolicy : automated : prune : true selfHeal : true allowEmpty : false syncOptions : - CreateNamespace=true - PrunePropagationPolicy=foreground - PruneLast=true retry : limit : 5 backoff : duration : 5s factor : 2 maxDuration : 3m revisionHistoryLimit : 10 info : - name : 'GitOps Demo Application' value : 'Aplicaci\u00f3n de demostraci\u00f3n para pipeline GitOps con Kubernetes y ArgoCD' Creaci\u00f3n via CLI \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Crear aplicaci\u00f3n argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace gitops-demo \\ --sync-policy automated \\ --auto-prune \\ --self-heal \\ --sync-option CreateNamespace = true # Verificar aplicaci\u00f3n argocd app get gitops-demo # Sincronizar manualmente (si es necesario) argocd app sync gitops-demo # Ver logs de sincronizaci\u00f3n argocd app logs gitops-demo Configuraci\u00f3n de Project \u00b6 ArgoCD Project \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : gitops-portfolio namespace : argocd labels : app.kubernetes.io/name : gitops-portfolio app.kubernetes.io/part-of : argocd annotations : argocd.argoproj.io/sync-wave : \"0\" finalizers : - resources-finalizer.argocd.argoproj.io spec : description : 'Portfolio de aplicaciones GitOps' # Repositorios permitidos sourceRepos : - 'https://github.com/Portfolio-jaime/*' - 'https://charts.helm.sh/stable' - 'https://kubernetes-charts.storage.googleapis.com' # Destinos permitidos destinations : - namespace : 'gitops-*' server : https://kubernetes.default.svc - namespace : 'portfolio-*' server : https://kubernetes.default.svc # Recursos permitidos por cluster clusterResourceWhitelist : - group : '' kind : Namespace - group : 'rbac.authorization.k8s.io' kind : ClusterRole - group : 'rbac.authorization.k8s.io' kind : ClusterRoleBinding # Recursos permitidos por namespace namespaceResourceWhitelist : - group : '' kind : ConfigMap - group : '' kind : Secret - group : '' kind : Service - group : '' kind : ServiceAccount - group : 'apps' kind : Deployment - group : 'apps' kind : ReplicaSet - group : 'networking.k8s.io' kind : Ingress - group : 'networking.k8s.io' kind : NetworkPolicy - group : 'autoscaling' kind : HorizontalPodAutoscaler - group : 'policy' kind : PodDisruptionBudget # Roles y pol\u00edticas roles : - name : developer description : 'Desarrolladores del portfolio' policies : - p, proj:gitops-portfolio:developer, applications, get, gitops-portfolio/*, allow - p, proj:gitops-portfolio:developer, applications, sync, gitops-portfolio/*, allow - p, proj:gitops-portfolio:developer, applications, action/*, gitops-portfolio/*, allow - p, proj:gitops-portfolio:developer, repositories, get, *, allow groups : - gitops-portfolio:developers - name : admin description : 'Administradores del portfolio' policies : - p, proj:gitops-portfolio:admin, applications, *, gitops-portfolio/*, allow - p, proj:gitops-portfolio:admin, repositories, *, *, allow - p, proj:gitops-portfolio:admin, clusters, *, *, allow groups : - gitops-portfolio:admins # Configuraci\u00f3n de sincronizaci\u00f3n syncWindows : - kind : allow schedule : '* * * * *' duration : 24h applications : - gitops-demo manualSync : true - kind : deny schedule : '0 2 * * 1-5' duration : 1h applications : - '*' manualSync : false timeZone : 'Europe/London' Configuraci\u00f3n Avanzada \u00b6 Repository Configuration \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 apiVersion : v1 kind : Secret metadata : name : gitops-repo-secret namespace : argocd labels : argocd.argoproj.io/secret-type : repository type : Opaque stringData : type : git url : https://github.com/Portfolio-jaime/GitOps.git username : Portfolio-jaime password : ghp_xxxxxxxxxxxxxxxxxxxx tlsClientCertData : | -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- tlsClientCertKey : | -----BEGIN RSA PRIVATE KEY----- ... -----END RSA PRIVATE KEY----- Webhook Configuration \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 apiVersion : argoproj.io/v1alpha1 kind : ArgoCD metadata : name : argocd namespace : argocd spec : server : insecure : true service : type : LoadBalancer ingress : enabled : true ingressClassName : nginx annotations : nginx.ingress.kubernetes.io/ssl-redirect : \"true\" nginx.ingress.kubernetes.io/backend-protocol : \"GRPC\" cert-manager.io/cluster-issuer : letsencrypt-prod hosts : - argocd.example.com tls : - secretName : argocd-server-tls hosts : - argocd.example.com # Configuraci\u00f3n de repositorios repositories : | - type: git url: https://github.com/Portfolio-jaime/GitOps.git name: gitops-portfolio # Configuraci\u00f3n de credenciales repositoryCredentials : | - url: https://github.com/Portfolio-jaime passwordSecret: name: gitops-repo-secret key: password usernameSecret: name: gitops-repo-secret key: username # Configuraci\u00f3n RBAC rbac : defaultPolicy : 'role:readonly' policy : | p, role:admin, applications, *, */*, allow p, role:admin, clusters, *, *, allow p, role:admin, repositories, *, *, allow p, role:developer, applications, get, */*, allow p, role:developer, applications, sync, */*, allow p, role:developer, applications, action/*, */*, allow g, argocd-admins, role:admin g, gitops-developers, role:developer scopes : '[groups]' # Configuraci\u00f3n de recursos resourceCustomizations : | networking.k8s.io/Ingress: health.lua: | hs = {} hs.status = \"Healthy\" return hs Monitoreo y Alertas \u00b6 ServiceMonitor para Prometheus \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-metrics namespace : argocd labels : app.kubernetes.io/name : argocd-metrics app.kubernetes.io/part-of : argocd spec : selector : matchLabels : app.kubernetes.io/name : argocd-metrics app.kubernetes.io/part-of : argocd endpoints : - port : metrics interval : 30s path : /metrics Grafana Dashboard \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 { \"dashboard\" : { \"id\" : null , \"title\" : \"ArgoCD GitOps Dashboard\" , \"tags\" : [ \"argocd\" , \"gitops\" ], \"timezone\" : \"browser\" , \"panels\" : [ { \"title\" : \"Application Health\" , \"type\" : \"stat\" , \"targets\" : [ { \"expr\" : \"argocd_app_health_status{application=\\\"gitops-demo\\\"}\" , \"legendFormat\" : \"Health Status\" } ] }, { \"title\" : \"Sync Status\" , \"type\" : \"stat\" , \"targets\" : [ { \"expr\" : \"argocd_app_sync_total{application=\\\"gitops-demo\\\"}\" , \"legendFormat\" : \"Sync Count\" } ] }, { \"title\" : \"Repository Activity\" , \"type\" : \"graph\" , \"targets\" : [ { \"expr\" : \"rate(argocd_git_request_total[5m])\" , \"legendFormat\" : \"Git Requests/sec\" } ] } ] } } Scripts de Utilidad \u00b6 setup-argocd.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/bin/bash set -e echo \"Installing ArgoCD...\" # Install ArgoCD kubectl create namespace argocd --dry-run = client -o yaml | kubectl apply -f - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml echo \"Waiting for ArgoCD to be ready...\" kubectl wait --for = condition = Ready pods --all -n argocd --timeout = 300s # Get admin password ARGOCD_PASSWORD = $( kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ) echo \"ArgoCD Installation Complete!\" echo \"================================\" echo \"Admin Password: $ARGOCD_PASSWORD \" echo \"\" echo \"To access ArgoCD UI:\" echo \"kubectl port-forward svc/argocd-server -n argocd 8080:443\" echo \"Then visit: https://localhost:8080\" echo \"\" echo \"To create the GitOps application:\" echo \"./create-app.sh\" create-app.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #!/bin/bash set -e APP_NAME = \"gitops-demo\" REPO_URL = \"https://github.com/Portfolio-jaime/GitOps.git\" PATH_IN_REPO = \"Kubernetes\" NAMESPACE = \"gitops-demo\" echo \"Creating ArgoCD application: $APP_NAME \" # Create application kubectl apply -f - <<EOF apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: $APP_NAME namespace: argocd finalizers: - resources-finalizer.argocd.argoproj.io spec: project: default source: repoURL: $REPO_URL targetRevision: HEAD path: $PATH_IN_REPO destination: server: https://kubernetes.default.svc namespace: $NAMESPACE syncPolicy: automated: prune: true selfHeal: true syncOptions: - CreateNamespace=true EOF echo \"Application ' $APP_NAME ' created successfully!\" echo \"\" echo \"To check status:\" echo \"kubectl get application $APP_NAME -n argocd\" echo \"\" echo \"To view in UI:\" echo \"kubectl port-forward svc/argocd-server -n argocd 8080:443\" sync-app.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash APP_NAME = ${ 1 :- gitops -demo } echo \"Syncing ArgoCD application: $APP_NAME \" # Check if application exists if ! kubectl get application $APP_NAME -n argocd >/dev/null 2 > & 1 ; then echo \"Error: Application ' $APP_NAME ' not found\" exit 1 fi # Trigger sync kubectl patch application $APP_NAME -n argocd \\ --type = 'merge' \\ -p = '{\"metadata\":{\"annotations\":{\"argocd.argoproj.io/refresh\":\"hard\"}}}' echo \"Sync triggered for application ' $APP_NAME '\" echo \"Check status with: kubectl get application $APP_NAME -n argocd -w\"","title":"ArgoCD"},{"location":"argocd/#argocd-configuration","text":"","title":"ArgoCD Configuration"},{"location":"argocd/#instalacion-y-configuracion","text":"","title":"Instalaci\u00f3n y Configuraci\u00f3n"},{"location":"argocd/#instalacion-de-argocd","text":"1 2 3 4 5 6 7 8 9 10 11 # Crear namespace kubectl create namespace argocd # Instalar ArgoCD kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Verificar instalaci\u00f3n kubectl get pods -n argocd # Esperar que todos los pods est\u00e9n listos kubectl wait --for = condition = Ready pods --all -n argocd --timeout = 300s","title":"Instalaci\u00f3n de ArgoCD"},{"location":"argocd/#acceso-a-argocd-ui","text":"1 2 3 4 5 6 7 8 9 # Obtener password inicial del admin kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ; echo # Port forward para acceso local kubectl port-forward svc/argocd-server -n argocd 8080 :443 # Acceder en el navegador: https://localhost:8080 # Usuario: admin # Password: [obtenido del comando anterior]","title":"Acceso a ArgoCD UI"},{"location":"argocd/#configuracion-de-cli","text":"1 2 3 4 5 6 7 8 9 10 # Instalar ArgoCD CLI curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd rm argocd-linux-amd64 # Login via CLI argocd login localhost:8080 # Cambiar password (opcional) argocd account update-password","title":"Configuraci\u00f3n de CLI"},{"location":"argocd/#configuracion-de-aplicacion-gitops","text":"","title":"Configuraci\u00f3n de Aplicaci\u00f3n GitOps"},{"location":"argocd/#manifest-de-aplicacion-argocd","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : gitops-demo namespace : argocd labels : app.kubernetes.io/name : gitops-demo app.kubernetes.io/part-of : gitops-portfolio annotations : argocd.argoproj.io/sync-wave : \"1\" finalizers : - resources-finalizer.argocd.argoproj.io spec : project : default source : repoURL : https://github.com/Portfolio-jaime/GitOps.git targetRevision : HEAD path : Kubernetes directory : recurse : true destination : server : https://kubernetes.default.svc namespace : gitops-demo syncPolicy : automated : prune : true selfHeal : true allowEmpty : false syncOptions : - CreateNamespace=true - PrunePropagationPolicy=foreground - PruneLast=true retry : limit : 5 backoff : duration : 5s factor : 2 maxDuration : 3m revisionHistoryLimit : 10 info : - name : 'GitOps Demo Application' value : 'Aplicaci\u00f3n de demostraci\u00f3n para pipeline GitOps con Kubernetes y ArgoCD'","title":"Manifest de Aplicaci\u00f3n ArgoCD"},{"location":"argocd/#creacion-via-cli","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Crear aplicaci\u00f3n argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace gitops-demo \\ --sync-policy automated \\ --auto-prune \\ --self-heal \\ --sync-option CreateNamespace = true # Verificar aplicaci\u00f3n argocd app get gitops-demo # Sincronizar manualmente (si es necesario) argocd app sync gitops-demo # Ver logs de sincronizaci\u00f3n argocd app logs gitops-demo","title":"Creaci\u00f3n via CLI"},{"location":"argocd/#configuracion-de-project","text":"","title":"Configuraci\u00f3n de Project"},{"location":"argocd/#argocd-project","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 apiVersion : argoproj.io/v1alpha1 kind : AppProject metadata : name : gitops-portfolio namespace : argocd labels : app.kubernetes.io/name : gitops-portfolio app.kubernetes.io/part-of : argocd annotations : argocd.argoproj.io/sync-wave : \"0\" finalizers : - resources-finalizer.argocd.argoproj.io spec : description : 'Portfolio de aplicaciones GitOps' # Repositorios permitidos sourceRepos : - 'https://github.com/Portfolio-jaime/*' - 'https://charts.helm.sh/stable' - 'https://kubernetes-charts.storage.googleapis.com' # Destinos permitidos destinations : - namespace : 'gitops-*' server : https://kubernetes.default.svc - namespace : 'portfolio-*' server : https://kubernetes.default.svc # Recursos permitidos por cluster clusterResourceWhitelist : - group : '' kind : Namespace - group : 'rbac.authorization.k8s.io' kind : ClusterRole - group : 'rbac.authorization.k8s.io' kind : ClusterRoleBinding # Recursos permitidos por namespace namespaceResourceWhitelist : - group : '' kind : ConfigMap - group : '' kind : Secret - group : '' kind : Service - group : '' kind : ServiceAccount - group : 'apps' kind : Deployment - group : 'apps' kind : ReplicaSet - group : 'networking.k8s.io' kind : Ingress - group : 'networking.k8s.io' kind : NetworkPolicy - group : 'autoscaling' kind : HorizontalPodAutoscaler - group : 'policy' kind : PodDisruptionBudget # Roles y pol\u00edticas roles : - name : developer description : 'Desarrolladores del portfolio' policies : - p, proj:gitops-portfolio:developer, applications, get, gitops-portfolio/*, allow - p, proj:gitops-portfolio:developer, applications, sync, gitops-portfolio/*, allow - p, proj:gitops-portfolio:developer, applications, action/*, gitops-portfolio/*, allow - p, proj:gitops-portfolio:developer, repositories, get, *, allow groups : - gitops-portfolio:developers - name : admin description : 'Administradores del portfolio' policies : - p, proj:gitops-portfolio:admin, applications, *, gitops-portfolio/*, allow - p, proj:gitops-portfolio:admin, repositories, *, *, allow - p, proj:gitops-portfolio:admin, clusters, *, *, allow groups : - gitops-portfolio:admins # Configuraci\u00f3n de sincronizaci\u00f3n syncWindows : - kind : allow schedule : '* * * * *' duration : 24h applications : - gitops-demo manualSync : true - kind : deny schedule : '0 2 * * 1-5' duration : 1h applications : - '*' manualSync : false timeZone : 'Europe/London'","title":"ArgoCD Project"},{"location":"argocd/#configuracion-avanzada","text":"","title":"Configuraci\u00f3n Avanzada"},{"location":"argocd/#repository-configuration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 apiVersion : v1 kind : Secret metadata : name : gitops-repo-secret namespace : argocd labels : argocd.argoproj.io/secret-type : repository type : Opaque stringData : type : git url : https://github.com/Portfolio-jaime/GitOps.git username : Portfolio-jaime password : ghp_xxxxxxxxxxxxxxxxxxxx tlsClientCertData : | -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- tlsClientCertKey : | -----BEGIN RSA PRIVATE KEY----- ... -----END RSA PRIVATE KEY-----","title":"Repository Configuration"},{"location":"argocd/#webhook-configuration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 apiVersion : argoproj.io/v1alpha1 kind : ArgoCD metadata : name : argocd namespace : argocd spec : server : insecure : true service : type : LoadBalancer ingress : enabled : true ingressClassName : nginx annotations : nginx.ingress.kubernetes.io/ssl-redirect : \"true\" nginx.ingress.kubernetes.io/backend-protocol : \"GRPC\" cert-manager.io/cluster-issuer : letsencrypt-prod hosts : - argocd.example.com tls : - secretName : argocd-server-tls hosts : - argocd.example.com # Configuraci\u00f3n de repositorios repositories : | - type: git url: https://github.com/Portfolio-jaime/GitOps.git name: gitops-portfolio # Configuraci\u00f3n de credenciales repositoryCredentials : | - url: https://github.com/Portfolio-jaime passwordSecret: name: gitops-repo-secret key: password usernameSecret: name: gitops-repo-secret key: username # Configuraci\u00f3n RBAC rbac : defaultPolicy : 'role:readonly' policy : | p, role:admin, applications, *, */*, allow p, role:admin, clusters, *, *, allow p, role:admin, repositories, *, *, allow p, role:developer, applications, get, */*, allow p, role:developer, applications, sync, */*, allow p, role:developer, applications, action/*, */*, allow g, argocd-admins, role:admin g, gitops-developers, role:developer scopes : '[groups]' # Configuraci\u00f3n de recursos resourceCustomizations : | networking.k8s.io/Ingress: health.lua: | hs = {} hs.status = \"Healthy\" return hs","title":"Webhook Configuration"},{"location":"argocd/#monitoreo-y-alertas","text":"","title":"Monitoreo y Alertas"},{"location":"argocd/#servicemonitor-para-prometheus","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : argocd-metrics namespace : argocd labels : app.kubernetes.io/name : argocd-metrics app.kubernetes.io/part-of : argocd spec : selector : matchLabels : app.kubernetes.io/name : argocd-metrics app.kubernetes.io/part-of : argocd endpoints : - port : metrics interval : 30s path : /metrics","title":"ServiceMonitor para Prometheus"},{"location":"argocd/#grafana-dashboard","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 { \"dashboard\" : { \"id\" : null , \"title\" : \"ArgoCD GitOps Dashboard\" , \"tags\" : [ \"argocd\" , \"gitops\" ], \"timezone\" : \"browser\" , \"panels\" : [ { \"title\" : \"Application Health\" , \"type\" : \"stat\" , \"targets\" : [ { \"expr\" : \"argocd_app_health_status{application=\\\"gitops-demo\\\"}\" , \"legendFormat\" : \"Health Status\" } ] }, { \"title\" : \"Sync Status\" , \"type\" : \"stat\" , \"targets\" : [ { \"expr\" : \"argocd_app_sync_total{application=\\\"gitops-demo\\\"}\" , \"legendFormat\" : \"Sync Count\" } ] }, { \"title\" : \"Repository Activity\" , \"type\" : \"graph\" , \"targets\" : [ { \"expr\" : \"rate(argocd_git_request_total[5m])\" , \"legendFormat\" : \"Git Requests/sec\" } ] } ] } }","title":"Grafana Dashboard"},{"location":"argocd/#scripts-de-utilidad","text":"","title":"Scripts de Utilidad"},{"location":"argocd/#setup-argocdsh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/bin/bash set -e echo \"Installing ArgoCD...\" # Install ArgoCD kubectl create namespace argocd --dry-run = client -o yaml | kubectl apply -f - kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml echo \"Waiting for ArgoCD to be ready...\" kubectl wait --for = condition = Ready pods --all -n argocd --timeout = 300s # Get admin password ARGOCD_PASSWORD = $( kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ) echo \"ArgoCD Installation Complete!\" echo \"================================\" echo \"Admin Password: $ARGOCD_PASSWORD \" echo \"\" echo \"To access ArgoCD UI:\" echo \"kubectl port-forward svc/argocd-server -n argocd 8080:443\" echo \"Then visit: https://localhost:8080\" echo \"\" echo \"To create the GitOps application:\" echo \"./create-app.sh\"","title":"setup-argocd.sh"},{"location":"argocd/#create-appsh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #!/bin/bash set -e APP_NAME = \"gitops-demo\" REPO_URL = \"https://github.com/Portfolio-jaime/GitOps.git\" PATH_IN_REPO = \"Kubernetes\" NAMESPACE = \"gitops-demo\" echo \"Creating ArgoCD application: $APP_NAME \" # Create application kubectl apply -f - <<EOF apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: $APP_NAME namespace: argocd finalizers: - resources-finalizer.argocd.argoproj.io spec: project: default source: repoURL: $REPO_URL targetRevision: HEAD path: $PATH_IN_REPO destination: server: https://kubernetes.default.svc namespace: $NAMESPACE syncPolicy: automated: prune: true selfHeal: true syncOptions: - CreateNamespace=true EOF echo \"Application ' $APP_NAME ' created successfully!\" echo \"\" echo \"To check status:\" echo \"kubectl get application $APP_NAME -n argocd\" echo \"\" echo \"To view in UI:\" echo \"kubectl port-forward svc/argocd-server -n argocd 8080:443\"","title":"create-app.sh"},{"location":"argocd/#sync-appsh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/bin/bash APP_NAME = ${ 1 :- gitops -demo } echo \"Syncing ArgoCD application: $APP_NAME \" # Check if application exists if ! kubectl get application $APP_NAME -n argocd >/dev/null 2 > & 1 ; then echo \"Error: Application ' $APP_NAME ' not found\" exit 1 fi # Trigger sync kubectl patch application $APP_NAME -n argocd \\ --type = 'merge' \\ -p = '{\"metadata\":{\"annotations\":{\"argocd.argoproj.io/refresh\":\"hard\"}}}' echo \"Sync triggered for application ' $APP_NAME '\" echo \"Check status with: kubectl get application $APP_NAME -n argocd -w\"","title":"sync-app.sh"},{"location":"components/","text":"Componentes del Sistema \u00b6 Aplicaci\u00f3n Web \u00b6 Caracter\u00edsticas T\u00e9cnicas \u00b6 Tecnolog\u00eda : HTML est\u00e1tico servido por Nginx Puerto : 80 Imagen Base : nginx:alpine Tama\u00f1o : ~5MB Dockerfile \u00b6 1 2 3 FROM nginx:alpine COPY Docker/index.html /usr/share/nginx/html/ EXPOSE 80 Estructura de Archivos \u00b6 1 2 3 Docker/ \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 index.html Manifiestos de Kubernetes \u00b6 Deployment \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 apiVersion : apps/v1 kind : Deployment metadata : name : gitops-demo labels : app : gitops-demo spec : replicas : 3 selector : matchLabels : app : gitops-demo template : metadata : labels : app : gitops-demo spec : containers : - name : webapp image : ghcr.io/portfolio-jaime/gitops:latest ports : - containerPort : 80 resources : requests : memory : \"64Mi\" cpu : \"250m\" limits : memory : \"128Mi\" cpu : \"500m\" livenessProbe : httpGet : path : / port : 80 initialDelaySeconds : 30 periodSeconds : 10 readinessProbe : httpGet : path : / port : 80 initialDelaySeconds : 5 periodSeconds : 5 Service \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVersion : v1 kind : Service metadata : name : gitops-demo labels : app : gitops-demo spec : type : ClusterIP ports : - port : 80 targetPort : 80 protocol : TCP selector : app : gitops-demo Ingress (Opcional) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : gitops-demo annotations : kubernetes.io/ingress.class : nginx cert-manager.io/cluster-issuer : letsencrypt-prod spec : tls : - hosts : - gitops-demo.example.com secretName : gitops-demo-tls rules : - host : gitops-demo.example.com http : paths : - path : / pathType : Prefix backend : service : name : gitops-demo port : number : 80 GitHub Actions Pipeline \u00b6 Workflow Principal (.github/workflows/cd.yml) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 name : CI/CD Pipeline on : push : branches : [ main ] pull_request : branches : [ main ] env : REGISTRY : ghcr.io IMAGE_NAME : ${{ github.repository }} jobs : build : runs-on : ubuntu-latest permissions : contents : read packages : write steps : - name : Checkout uses : actions/checkout@v4 - name : Log in to Container Registry uses : docker/login-action@v3 with : registry : ${{ env.REGISTRY }} username : ${{ github.actor }} password : ${{ secrets.GITHUB_TOKEN }} - name : Extract metadata id : meta uses : docker/metadata-action@v5 with : images : ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} tags : | type=ref,event=branch type=ref,event=pr type=sha,prefix={{branch}}- type=raw,value=latest,enable={{is_default_branch}} - name : Build and push Docker image uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile push : true tags : ${{ steps.meta.outputs.tags }} labels : ${{ steps.meta.outputs.labels }} - name : Update Kubernetes manifests if : github.ref == 'refs/heads/main' run : | sed -i 's|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|' Kubernetes/deployment.yaml git config --local user.email \"action@github.com\" git config --local user.name \"GitHub Action\" git add Kubernetes/deployment.yaml git commit -m \"Update image tag to ${{ github.sha }}\" || exit 0 git push Jobs y Steps \u00b6 Checkout : Descargar c\u00f3digo fuente Login : Autenticaci\u00f3n con GitHub Container Registry Build : Construcci\u00f3n de imagen Docker Push : Subida de imagen al registry Update Manifests : Actualizaci\u00f3n autom\u00e1tica de manifiestos Commit : Push de cambios de vuelta al repositorio Variables de Entorno \u00b6 REGISTRY : Registro de contenedores (ghcr.io) IMAGE_NAME : Nombre de la imagen basado en el repositorio GITHUB_TOKEN : Token autom\u00e1tico para autenticaci\u00f3n Secrets Necesarios \u00b6 GITHUB_TOKEN : Generado autom\u00e1ticamente DOCKER_REGISTRY : URL del registry (opcional) DOCKER_USERNAME : Usuario del registry (opcional) DOCKER_PASSWORD : Password/token del registry (opcional) ArgoCD Configuration \u00b6 Application Manifest \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : gitops-demo namespace : argocd spec : project : default source : repoURL : https://github.com/Portfolio-jaime/GitOps.git targetRevision : HEAD path : Kubernetes destination : server : https://kubernetes.default.svc namespace : gitops-demo syncPolicy : automated : prune : true selfHeal : true syncOptions : - CreateNamespace=true Sync Policy \u00b6 Automated : Sincronizaci\u00f3n autom\u00e1tica habilitada Prune : Eliminar recursos hu\u00e9rfanos Self Heal : Auto-correcci\u00f3n de drift Create Namespace : Crear namespace autom\u00e1ticamente Health Checks \u00b6 ArgoCD monitorear\u00e1 autom\u00e1ticamente: - Estado de Deployment - Estado de Pods - Estado de Services - Configuraci\u00f3n de Ingress Monitoreo y Logging \u00b6 Health Checks \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Liveness Probe livenessProbe : httpGet : path : / port : 80 initialDelaySeconds : 30 periodSeconds : 10 failureThreshold : 3 # Readiness Probe readinessProbe : httpGet : path : / port : 80 initialDelaySeconds : 5 periodSeconds : 5 failureThreshold : 3 Resource Limits \u00b6 1 2 3 4 5 6 7 resources : requests : memory : \"64Mi\" cpu : \"250m\" limits : memory : \"128Mi\" cpu : \"500m\" Labels y Annotations \u00b6 1 2 3 4 5 6 7 8 9 10 11 metadata : labels : app : gitops-demo version : v1.0.0 component : webapp part-of : gitops-demo annotations : app.kubernetes.io/name : gitops-demo app.kubernetes.io/version : \"1.0.0\" app.kubernetes.io/component : webapp app.kubernetes.io/part-of : gitops-demo Seguridad \u00b6 Container Security \u00b6 Non-root user : Nginx corre como usuario no-root Read-only filesystem : Sistema de archivos de solo lectura Security context : Configuraci\u00f3n de seguridad del contenedor Network Policies \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : gitops-demo-netpol spec : podSelector : matchLabels : app : gitops-demo policyTypes : - Ingress - Egress ingress : - from : - namespaceSelector : matchLabels : name : ingress-nginx egress : - to : [] ports : - protocol : TCP port : 53 - protocol : UDP port : 53 RBAC \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 apiVersion : v1 kind : ServiceAccount metadata : name : gitops-demo namespace : gitops-demo --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : gitops-demo namespace : gitops-demo rules : - apiGroups : [ \"\" ] resources : [ \"configmaps\" ] verbs : [ \"get\" , \"list\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : gitops-demo namespace : gitops-demo subjects : - kind : ServiceAccount name : gitops-demo namespace : gitops-demo roleRef : kind : Role name : gitops-demo apiGroup : rbac.authorization.k8s.io","title":"Components"},{"location":"components/#componentes-del-sistema","text":"","title":"Componentes del Sistema"},{"location":"components/#aplicacion-web","text":"","title":"Aplicaci\u00f3n Web"},{"location":"components/#caracteristicas-tecnicas","text":"Tecnolog\u00eda : HTML est\u00e1tico servido por Nginx Puerto : 80 Imagen Base : nginx:alpine Tama\u00f1o : ~5MB","title":"Caracter\u00edsticas T\u00e9cnicas"},{"location":"components/#dockerfile","text":"1 2 3 FROM nginx:alpine COPY Docker/index.html /usr/share/nginx/html/ EXPOSE 80","title":"Dockerfile"},{"location":"components/#estructura-de-archivos","text":"1 2 3 Docker/ \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 index.html","title":"Estructura de Archivos"},{"location":"components/#manifiestos-de-kubernetes","text":"","title":"Manifiestos de Kubernetes"},{"location":"components/#deployment","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 apiVersion : apps/v1 kind : Deployment metadata : name : gitops-demo labels : app : gitops-demo spec : replicas : 3 selector : matchLabels : app : gitops-demo template : metadata : labels : app : gitops-demo spec : containers : - name : webapp image : ghcr.io/portfolio-jaime/gitops:latest ports : - containerPort : 80 resources : requests : memory : \"64Mi\" cpu : \"250m\" limits : memory : \"128Mi\" cpu : \"500m\" livenessProbe : httpGet : path : / port : 80 initialDelaySeconds : 30 periodSeconds : 10 readinessProbe : httpGet : path : / port : 80 initialDelaySeconds : 5 periodSeconds : 5","title":"Deployment"},{"location":"components/#service","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVersion : v1 kind : Service metadata : name : gitops-demo labels : app : gitops-demo spec : type : ClusterIP ports : - port : 80 targetPort : 80 protocol : TCP selector : app : gitops-demo","title":"Service"},{"location":"components/#ingress-opcional","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : gitops-demo annotations : kubernetes.io/ingress.class : nginx cert-manager.io/cluster-issuer : letsencrypt-prod spec : tls : - hosts : - gitops-demo.example.com secretName : gitops-demo-tls rules : - host : gitops-demo.example.com http : paths : - path : / pathType : Prefix backend : service : name : gitops-demo port : number : 80","title":"Ingress (Opcional)"},{"location":"components/#github-actions-pipeline","text":"","title":"GitHub Actions Pipeline"},{"location":"components/#workflow-principal-githubworkflowscdyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 name : CI/CD Pipeline on : push : branches : [ main ] pull_request : branches : [ main ] env : REGISTRY : ghcr.io IMAGE_NAME : ${{ github.repository }} jobs : build : runs-on : ubuntu-latest permissions : contents : read packages : write steps : - name : Checkout uses : actions/checkout@v4 - name : Log in to Container Registry uses : docker/login-action@v3 with : registry : ${{ env.REGISTRY }} username : ${{ github.actor }} password : ${{ secrets.GITHUB_TOKEN }} - name : Extract metadata id : meta uses : docker/metadata-action@v5 with : images : ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} tags : | type=ref,event=branch type=ref,event=pr type=sha,prefix={{branch}}- type=raw,value=latest,enable={{is_default_branch}} - name : Build and push Docker image uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile push : true tags : ${{ steps.meta.outputs.tags }} labels : ${{ steps.meta.outputs.labels }} - name : Update Kubernetes manifests if : github.ref == 'refs/heads/main' run : | sed -i 's|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|' Kubernetes/deployment.yaml git config --local user.email \"action@github.com\" git config --local user.name \"GitHub Action\" git add Kubernetes/deployment.yaml git commit -m \"Update image tag to ${{ github.sha }}\" || exit 0 git push","title":"Workflow Principal (.github/workflows/cd.yml)"},{"location":"components/#jobs-y-steps","text":"Checkout : Descargar c\u00f3digo fuente Login : Autenticaci\u00f3n con GitHub Container Registry Build : Construcci\u00f3n de imagen Docker Push : Subida de imagen al registry Update Manifests : Actualizaci\u00f3n autom\u00e1tica de manifiestos Commit : Push de cambios de vuelta al repositorio","title":"Jobs y Steps"},{"location":"components/#variables-de-entorno","text":"REGISTRY : Registro de contenedores (ghcr.io) IMAGE_NAME : Nombre de la imagen basado en el repositorio GITHUB_TOKEN : Token autom\u00e1tico para autenticaci\u00f3n","title":"Variables de Entorno"},{"location":"components/#secrets-necesarios","text":"GITHUB_TOKEN : Generado autom\u00e1ticamente DOCKER_REGISTRY : URL del registry (opcional) DOCKER_USERNAME : Usuario del registry (opcional) DOCKER_PASSWORD : Password/token del registry (opcional)","title":"Secrets Necesarios"},{"location":"components/#argocd-configuration","text":"","title":"ArgoCD Configuration"},{"location":"components/#application-manifest","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 apiVersion : argoproj.io/v1alpha1 kind : Application metadata : name : gitops-demo namespace : argocd spec : project : default source : repoURL : https://github.com/Portfolio-jaime/GitOps.git targetRevision : HEAD path : Kubernetes destination : server : https://kubernetes.default.svc namespace : gitops-demo syncPolicy : automated : prune : true selfHeal : true syncOptions : - CreateNamespace=true","title":"Application Manifest"},{"location":"components/#sync-policy","text":"Automated : Sincronizaci\u00f3n autom\u00e1tica habilitada Prune : Eliminar recursos hu\u00e9rfanos Self Heal : Auto-correcci\u00f3n de drift Create Namespace : Crear namespace autom\u00e1ticamente","title":"Sync Policy"},{"location":"components/#health-checks","text":"ArgoCD monitorear\u00e1 autom\u00e1ticamente: - Estado de Deployment - Estado de Pods - Estado de Services - Configuraci\u00f3n de Ingress","title":"Health Checks"},{"location":"components/#monitoreo-y-logging","text":"","title":"Monitoreo y Logging"},{"location":"components/#health-checks_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Liveness Probe livenessProbe : httpGet : path : / port : 80 initialDelaySeconds : 30 periodSeconds : 10 failureThreshold : 3 # Readiness Probe readinessProbe : httpGet : path : / port : 80 initialDelaySeconds : 5 periodSeconds : 5 failureThreshold : 3","title":"Health Checks"},{"location":"components/#resource-limits","text":"1 2 3 4 5 6 7 resources : requests : memory : \"64Mi\" cpu : \"250m\" limits : memory : \"128Mi\" cpu : \"500m\"","title":"Resource Limits"},{"location":"components/#labels-y-annotations","text":"1 2 3 4 5 6 7 8 9 10 11 metadata : labels : app : gitops-demo version : v1.0.0 component : webapp part-of : gitops-demo annotations : app.kubernetes.io/name : gitops-demo app.kubernetes.io/version : \"1.0.0\" app.kubernetes.io/component : webapp app.kubernetes.io/part-of : gitops-demo","title":"Labels y Annotations"},{"location":"components/#seguridad","text":"","title":"Seguridad"},{"location":"components/#container-security","text":"Non-root user : Nginx corre como usuario no-root Read-only filesystem : Sistema de archivos de solo lectura Security context : Configuraci\u00f3n de seguridad del contenedor","title":"Container Security"},{"location":"components/#network-policies","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : gitops-demo-netpol spec : podSelector : matchLabels : app : gitops-demo policyTypes : - Ingress - Egress ingress : - from : - namespaceSelector : matchLabels : name : ingress-nginx egress : - to : [] ports : - protocol : TCP port : 53 - protocol : UDP port : 53","title":"Network Policies"},{"location":"components/#rbac","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 apiVersion : v1 kind : ServiceAccount metadata : name : gitops-demo namespace : gitops-demo --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : gitops-demo namespace : gitops-demo rules : - apiGroups : [ \"\" ] resources : [ \"configmaps\" ] verbs : [ \"get\" , \"list\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : gitops-demo namespace : gitops-demo subjects : - kind : ServiceAccount name : gitops-demo namespace : gitops-demo roleRef : kind : Role name : gitops-demo apiGroup : rbac.authorization.k8s.io","title":"RBAC"},{"location":"docker/","text":"Docker Configuration \u00b6 Dockerfile \u00b6 Configuraci\u00f3n de la Imagen \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 FROM nginx:alpine # Metadatos de la imagen LABEL maintainer = \"jaime.andres.henao.arbelaez@ba.com\" LABEL description = \"GitOps Demo - Simple web application\" LABEL version = \"1.0\" # Copiar aplicaci\u00f3n web COPY Docker/index.html /usr/share/nginx/html/ # Configuraci\u00f3n de Nginx COPY Docker/nginx.conf /etc/nginx/nginx.conf # Exponer puerto EXPOSE 80 # Usuario no-root para seguridad RUN addgroup -g 1001 -S nginx && \\ adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx # Cambiar ownership de archivos RUN chown -R nginx:nginx /usr/share/nginx/html && \\ chown -R nginx:nginx /var/cache/nginx && \\ chown -R nginx:nginx /var/log/nginx && \\ chown -R nginx:nginx /etc/nginx/conf.d # Cambiar a usuario no-root USER nginx # Health check HEALTHCHECK --interval = 30s --timeout = 3s --start-period = 5s --retries = 3 \\ CMD curl -f http://localhost/ || exit 1 # Comando por defecto CMD [ \"nginx\" , \"-g\" , \"daemon off;\" ] Configuraci\u00f3n de Nginx \u00b6 nginx.conf personalizado \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 events { worker_connections 1024 ; } http { include /etc/nginx/mime.types ; default_type application/octet-stream ; # Configuraci\u00f3n de logging log_format main ' $remote_addr - $remote_user [ $time_local] \" $request\" ' ' $status $body_bytes_sent \" $http_referer\" ' '\" $http_user_agent\" \" $http_x_forwarded_for\"' ; access_log /var/log/nginx/access.log main ; error_log /var/log/nginx/error.log warn ; # Configuraci\u00f3n de rendimiento sendfile on ; tcp_nopush on ; tcp_nodelay on ; keepalive_timeout 65 ; types_hash_max_size 2048 ; # Configuraci\u00f3n de compresi\u00f3n gzip on ; gzip_vary on ; gzip_min_length 1024 ; gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json ; server { listen 8080 ; server_name localhost ; root /usr/share/nginx/html ; index index.html ; # Configuraci\u00f3n de seguridad add_header X-Frame-Options \"SAMEORIGIN\" always ; add_header X-XSS-Protection \"1 ; mode=block\" always ; add_header X-Content-Type-Options \"nosniff\" always ; add_header Referrer-Policy \"no-referrer-when-downgrade\" always ; add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always ; # Configuraci\u00f3n de cach\u00e9 location ~ * \\.(css|js|png|jpg|jpeg|gif|ico|svg) $ { expires 1y ; add_header Cache-Control \"public, immutable\" ; } # Ruta principal location / { try_files $uri $uri/ = 404 ; } # Health check endpoint location /health { access_log off ; return 200 \"healthy\\n\" ; add_header Content-Type text/plain ; } # Configuraci\u00f3n de error pages error_page 404 /404.html ; error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } } Build Strategy \u00b6 Multi-stage Build (Optimizado) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # Build stage FROM node:16-alpine AS builder WORKDIR /app COPY package*.json ./ RUN npm ci --only = production # Production stage FROM nginx:alpine # Instalar curl para health checks RUN apk add --no-cache curl # Copiar archivos de aplicaci\u00f3n COPY --from = builder /app/dist /usr/share/nginx/html COPY Docker/nginx.conf /etc/nginx/nginx.conf # Configuraci\u00f3n de seguridad RUN addgroup -g 1001 -S nginx && \\ adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \\ chown -R nginx:nginx /usr/share/nginx/html && \\ chown -R nginx:nginx /var/cache/nginx && \\ chown -R nginx:nginx /var/log/nginx && \\ chown -R nginx:nginx /etc/nginx/conf.d && \\ touch /var/run/nginx.pid && \\ chown -R nginx:nginx /var/run/nginx.pid USER nginx EXPOSE 8080 HEALTHCHECK --interval = 30s --timeout = 3s --start-period = 5s --retries = 3 \\ CMD curl -f http://localhost:8080/health || exit 1 CMD [ \"nginx\" , \"-g\" , \"daemon off;\" ] Docker Compose para Desarrollo \u00b6 docker-compose.yml \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 version : '3.8' services : webapp : build : context : . dockerfile : Docker/Dockerfile container_name : gitops-demo ports : - \"8080:8080\" environment : - NODE_ENV=development volumes : - ./Docker/index.html:/usr/share/nginx/html/index.html:ro networks : - gitops-network restart : unless-stopped healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:8080/health\" ] interval : 30s timeout : 10s retries : 3 start_period : 40s # Opcional: Agregar un reverse proxy traefik : image : traefik:v2.10 command : - --api.insecure=true - --providers.docker=true - --providers.docker.exposedbydefault=false - --entrypoints.web.address=:80 ports : - \"80:80\" - \"8080:8080\" volumes : - /var/run/docker.sock:/var/run/docker.sock:ro networks : - gitops-network labels : - \"traefik.enable=true\" - \"traefik.http.routers.traefik.rule=Host(`traefik.localhost`)\" - \"traefik.http.routers.traefik.entrypoints=web\" networks : gitops-network : driver : bridge Optimizaciones de Imagen \u00b6 .dockerignore \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # Git .git .gitignore # Documentation README.md docs/ *.md # Development files docker-compose*.yml .env* .vscode/ .idea/ # CI/CD .github/ Jenkinsfile .gitlab-ci.yml # Kubernetes Kubernetes/ k8s/ # Node modules (if applicable) node_modules/ npm-debug.log* # Logs *.log # OS generated files .DS_Store Thumbs.db # Temporary files tmp/ temp/ *.tmp *.bak An\u00e1lisis de Imagen \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Analizar tama\u00f1o de imagen docker images gitops-demo # Inspeccionar layers docker history gitops-demo # Scan de vulnerabilidades docker scan gitops-demo # Analizar con dive dive gitops-demo Mejores Pr\u00e1cticas Implementadas \u00b6 1. Seguridad \u00b6 Non-root user : Usuario no-root para ejecuci\u00f3n Security headers : Headers de seguridad HTTP Health checks : Verificaci\u00f3n de estado Minimal base : Imagen Alpine para reducir superficie de ataque 2. Rendimiento \u00b6 Gzip compression : Compresi\u00f3n de contenido Static file caching : Cach\u00e9 de archivos est\u00e1ticos Keepalive connections : Conexiones persistentes Multi-stage builds : Optimizaci\u00f3n de tama\u00f1o 3. Observabilidad \u00b6 Structured logging : Logs estructurados Health endpoint : Endpoint de salud Metrics ready : Preparado para m\u00e9tricas Graceful shutdown : Cierre ordenado 4. Portabilidad \u00b6 Environment variables : Configuraci\u00f3n v\u00eda variables Volume mounts : Configuraci\u00f3n externa Signal handling : Manejo de se\u00f1ales del sistema Standard ports : Puertos est\u00e1ndar Scripts de Utilidad \u00b6 build.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/bin/bash set -e # Variables IMAGE_NAME = \"gitops-demo\" TAG = \" ${ 1 :- latest } \" REGISTRY = \" ${ DOCKER_REGISTRY :- ghcr .io/portfolio-jaime } \" echo \"Building image: ${ REGISTRY } / ${ IMAGE_NAME } : ${ TAG } \" # Build docker build \\ -t ${ IMAGE_NAME } : ${ TAG } \\ -t ${ REGISTRY } / ${ IMAGE_NAME } : ${ TAG } \\ -f Docker/Dockerfile \\ . # Opcional: Push si se proporciona registry if [ ! -z \" $DOCKER_REGISTRY \" ] ; then echo \"Pushing to registry...\" docker push ${ REGISTRY } / ${ IMAGE_NAME } : ${ TAG } fi echo \"Build complete!\" run-local.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/bin/bash # Ejecutar localmente para testing docker run -d \\ --name gitops-demo-local \\ -p 8080 :8080 \\ --rm \\ gitops-demo:latest echo \"Application running at: http://localhost:8080\" echo \"Health check: http://localhost:8080/health\" echo \"\" echo \"To stop: docker stop gitops-demo-local\"","title":"Docker"},{"location":"docker/#docker-configuration","text":"","title":"Docker Configuration"},{"location":"docker/#dockerfile","text":"","title":"Dockerfile"},{"location":"docker/#configuracion-de-la-imagen","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 FROM nginx:alpine # Metadatos de la imagen LABEL maintainer = \"jaime.andres.henao.arbelaez@ba.com\" LABEL description = \"GitOps Demo - Simple web application\" LABEL version = \"1.0\" # Copiar aplicaci\u00f3n web COPY Docker/index.html /usr/share/nginx/html/ # Configuraci\u00f3n de Nginx COPY Docker/nginx.conf /etc/nginx/nginx.conf # Exponer puerto EXPOSE 80 # Usuario no-root para seguridad RUN addgroup -g 1001 -S nginx && \\ adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx # Cambiar ownership de archivos RUN chown -R nginx:nginx /usr/share/nginx/html && \\ chown -R nginx:nginx /var/cache/nginx && \\ chown -R nginx:nginx /var/log/nginx && \\ chown -R nginx:nginx /etc/nginx/conf.d # Cambiar a usuario no-root USER nginx # Health check HEALTHCHECK --interval = 30s --timeout = 3s --start-period = 5s --retries = 3 \\ CMD curl -f http://localhost/ || exit 1 # Comando por defecto CMD [ \"nginx\" , \"-g\" , \"daemon off;\" ]","title":"Configuraci\u00f3n de la Imagen"},{"location":"docker/#configuracion-de-nginx","text":"","title":"Configuraci\u00f3n de Nginx"},{"location":"docker/#nginxconf-personalizado","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 events { worker_connections 1024 ; } http { include /etc/nginx/mime.types ; default_type application/octet-stream ; # Configuraci\u00f3n de logging log_format main ' $remote_addr - $remote_user [ $time_local] \" $request\" ' ' $status $body_bytes_sent \" $http_referer\" ' '\" $http_user_agent\" \" $http_x_forwarded_for\"' ; access_log /var/log/nginx/access.log main ; error_log /var/log/nginx/error.log warn ; # Configuraci\u00f3n de rendimiento sendfile on ; tcp_nopush on ; tcp_nodelay on ; keepalive_timeout 65 ; types_hash_max_size 2048 ; # Configuraci\u00f3n de compresi\u00f3n gzip on ; gzip_vary on ; gzip_min_length 1024 ; gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json ; server { listen 8080 ; server_name localhost ; root /usr/share/nginx/html ; index index.html ; # Configuraci\u00f3n de seguridad add_header X-Frame-Options \"SAMEORIGIN\" always ; add_header X-XSS-Protection \"1 ; mode=block\" always ; add_header X-Content-Type-Options \"nosniff\" always ; add_header Referrer-Policy \"no-referrer-when-downgrade\" always ; add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always ; # Configuraci\u00f3n de cach\u00e9 location ~ * \\.(css|js|png|jpg|jpeg|gif|ico|svg) $ { expires 1y ; add_header Cache-Control \"public, immutable\" ; } # Ruta principal location / { try_files $uri $uri/ = 404 ; } # Health check endpoint location /health { access_log off ; return 200 \"healthy\\n\" ; add_header Content-Type text/plain ; } # Configuraci\u00f3n de error pages error_page 404 /404.html ; error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } }","title":"nginx.conf personalizado"},{"location":"docker/#build-strategy","text":"","title":"Build Strategy"},{"location":"docker/#multi-stage-build-optimizado","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 # Build stage FROM node:16-alpine AS builder WORKDIR /app COPY package*.json ./ RUN npm ci --only = production # Production stage FROM nginx:alpine # Instalar curl para health checks RUN apk add --no-cache curl # Copiar archivos de aplicaci\u00f3n COPY --from = builder /app/dist /usr/share/nginx/html COPY Docker/nginx.conf /etc/nginx/nginx.conf # Configuraci\u00f3n de seguridad RUN addgroup -g 1001 -S nginx && \\ adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \\ chown -R nginx:nginx /usr/share/nginx/html && \\ chown -R nginx:nginx /var/cache/nginx && \\ chown -R nginx:nginx /var/log/nginx && \\ chown -R nginx:nginx /etc/nginx/conf.d && \\ touch /var/run/nginx.pid && \\ chown -R nginx:nginx /var/run/nginx.pid USER nginx EXPOSE 8080 HEALTHCHECK --interval = 30s --timeout = 3s --start-period = 5s --retries = 3 \\ CMD curl -f http://localhost:8080/health || exit 1 CMD [ \"nginx\" , \"-g\" , \"daemon off;\" ]","title":"Multi-stage Build (Optimizado)"},{"location":"docker/#docker-compose-para-desarrollo","text":"","title":"Docker Compose para Desarrollo"},{"location":"docker/#docker-composeyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 version : '3.8' services : webapp : build : context : . dockerfile : Docker/Dockerfile container_name : gitops-demo ports : - \"8080:8080\" environment : - NODE_ENV=development volumes : - ./Docker/index.html:/usr/share/nginx/html/index.html:ro networks : - gitops-network restart : unless-stopped healthcheck : test : [ \"CMD\" , \"curl\" , \"-f\" , \"http://localhost:8080/health\" ] interval : 30s timeout : 10s retries : 3 start_period : 40s # Opcional: Agregar un reverse proxy traefik : image : traefik:v2.10 command : - --api.insecure=true - --providers.docker=true - --providers.docker.exposedbydefault=false - --entrypoints.web.address=:80 ports : - \"80:80\" - \"8080:8080\" volumes : - /var/run/docker.sock:/var/run/docker.sock:ro networks : - gitops-network labels : - \"traefik.enable=true\" - \"traefik.http.routers.traefik.rule=Host(`traefik.localhost`)\" - \"traefik.http.routers.traefik.entrypoints=web\" networks : gitops-network : driver : bridge","title":"docker-compose.yml"},{"location":"docker/#optimizaciones-de-imagen","text":"","title":"Optimizaciones de Imagen"},{"location":"docker/#dockerignore","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # Git .git .gitignore # Documentation README.md docs/ *.md # Development files docker-compose*.yml .env* .vscode/ .idea/ # CI/CD .github/ Jenkinsfile .gitlab-ci.yml # Kubernetes Kubernetes/ k8s/ # Node modules (if applicable) node_modules/ npm-debug.log* # Logs *.log # OS generated files .DS_Store Thumbs.db # Temporary files tmp/ temp/ *.tmp *.bak","title":".dockerignore"},{"location":"docker/#analisis-de-imagen","text":"1 2 3 4 5 6 7 8 9 10 11 # Analizar tama\u00f1o de imagen docker images gitops-demo # Inspeccionar layers docker history gitops-demo # Scan de vulnerabilidades docker scan gitops-demo # Analizar con dive dive gitops-demo","title":"An\u00e1lisis de Imagen"},{"location":"docker/#mejores-practicas-implementadas","text":"","title":"Mejores Pr\u00e1cticas Implementadas"},{"location":"docker/#1-seguridad","text":"Non-root user : Usuario no-root para ejecuci\u00f3n Security headers : Headers de seguridad HTTP Health checks : Verificaci\u00f3n de estado Minimal base : Imagen Alpine para reducir superficie de ataque","title":"1. Seguridad"},{"location":"docker/#2-rendimiento","text":"Gzip compression : Compresi\u00f3n de contenido Static file caching : Cach\u00e9 de archivos est\u00e1ticos Keepalive connections : Conexiones persistentes Multi-stage builds : Optimizaci\u00f3n de tama\u00f1o","title":"2. Rendimiento"},{"location":"docker/#3-observabilidad","text":"Structured logging : Logs estructurados Health endpoint : Endpoint de salud Metrics ready : Preparado para m\u00e9tricas Graceful shutdown : Cierre ordenado","title":"3. Observabilidad"},{"location":"docker/#4-portabilidad","text":"Environment variables : Configuraci\u00f3n v\u00eda variables Volume mounts : Configuraci\u00f3n externa Signal handling : Manejo de se\u00f1ales del sistema Standard ports : Puertos est\u00e1ndar","title":"4. Portabilidad"},{"location":"docker/#scripts-de-utilidad","text":"","title":"Scripts de Utilidad"},{"location":"docker/#buildsh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/bin/bash set -e # Variables IMAGE_NAME = \"gitops-demo\" TAG = \" ${ 1 :- latest } \" REGISTRY = \" ${ DOCKER_REGISTRY :- ghcr .io/portfolio-jaime } \" echo \"Building image: ${ REGISTRY } / ${ IMAGE_NAME } : ${ TAG } \" # Build docker build \\ -t ${ IMAGE_NAME } : ${ TAG } \\ -t ${ REGISTRY } / ${ IMAGE_NAME } : ${ TAG } \\ -f Docker/Dockerfile \\ . # Opcional: Push si se proporciona registry if [ ! -z \" $DOCKER_REGISTRY \" ] ; then echo \"Pushing to registry...\" docker push ${ REGISTRY } / ${ IMAGE_NAME } : ${ TAG } fi echo \"Build complete!\"","title":"build.sh"},{"location":"docker/#run-localsh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 #!/bin/bash # Ejecutar localmente para testing docker run -d \\ --name gitops-demo-local \\ -p 8080 :8080 \\ --rm \\ gitops-demo:latest echo \"Application running at: http://localhost:8080\" echo \"Health check: http://localhost:8080/health\" echo \"\" echo \"To stop: docker stop gitops-demo-local\"","title":"run-local.sh"},{"location":"github-actions/","text":"GitHub Actions CI/CD Pipeline \u00b6 Configuraci\u00f3n Principal \u00b6 Workflow CI/CD (.github/workflows/cd.yml) \u00bname : GitOps CI/CD Pipeline on : push : branches : [ main , develop ] pull_request : branches : [ main ] types : [ opened , synchronize , reopened ] workflow_dispatch : inputs : environment : description : 'Environment to deploy' required : true default : 'development' type : choice options : - development - staging - production env : REGISTRY : ghcr.io IMAGE_NAME : ${{ github.repository }} DOCKER_BUILDKIT : 1 jobs : # Job de an\u00e1lisis de c\u00f3digo y seguridad security-scan : name : Security Analysis runs-on : ubuntu-latest permissions : contents : read security-events : write steps : - name : Checkout code uses : actions/checkout@v4 with : fetch-depth : 0 - name : Run Trivy vulnerability scanner uses : aquasecurity/trivy-action@master with : scan-type : 'fs' scan-ref : '.' format : 'sarif' output : 'trivy-results.sarif' - name : Upload Trivy scan results uses : github/codeql-action/upload-sarif@v3 if : always() with : sarif_file : 'trivy-results.sarif' - name : Run Hadolint uses : hadolint/hadolint-action@v3.1.0 with : dockerfile : Docker/Dockerfile format : sarif output-file : hadolint-results.sarif no-fail : true - name : Upload Hadolint results uses : github/codeql-action/upload-sarif@v3 if : always() with : sarif_file : hadolint-results.sarif # Job de testing test : name : Run Tests runs-on : ubuntu-latest needs : [ security-scan ] steps : - name : Checkout code uses : actions/checkout@v4 - name : Set up Node.js uses : actions/setup-node@v4 with : node-version : '18' cache : 'npm' - name : Install dependencies run : npm ci - name : Run unit tests run : npm test - name : Run integration tests run : npm run test:integration - name : Upload test results uses : actions/upload-artifact@v4 if : always() with : name : test-results path : | coverage/ test-results.xml # Job de construcci\u00f3n y push de imagen build-and-push : name : Build and Push Docker Image runs-on : ubuntu-latest needs : [ test ] permissions : contents : read packages : write outputs : image-digest : ${{ steps.build.outputs.digest }} image-tags : ${{ steps.meta.outputs.tags }} steps : - name : Checkout code uses : actions/checkout@v4 - name : Set up Docker Buildx uses : docker/setup-buildx-action@v3 - name : Log in to Container Registry uses : docker/login-action@v3 with : registry : ${{ env.REGISTRY }} username : ${{ github.actor }} password : ${{ secrets.GITHUB_TOKEN }} - name : Extract metadata id : meta uses : docker/metadata-action@v5 with : images : ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} tags : | type=ref,event=branch type=ref,event=pr type=sha,prefix={{branch}}- type=raw,value=latest,enable={{is_default_branch}} type=raw,value={{date 'YYYY-MM-DD-HHmmss'}} labels : | org.opencontainers.image.title=GitOps Demo Application org.opencontainers.image.description=Simple web application for GitOps demonstration org.opencontainers.image.vendor=Portfolio-jaime org.opencontainers.image.licenses=MIT - name : Build and push Docker image id : build uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile platforms : linux/amd64,linux/arm64 push : true tags : ${{ steps.meta.outputs.tags }} labels : ${{ steps.meta.outputs.labels }} cache-from : type=gha cache-to : type=gha,mode=max provenance : false sbom : true - name : Run Trivy scanner on image uses : aquasecurity/trivy-action@master with : image-ref : ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} format : 'sarif' output : 'trivy-image-results.sarif' - name : Upload Trivy scan results uses : github/codeql-action/upload-sarif@v3 if : always() with : sarif_file : 'trivy-image-results.sarif' # Job de actualizaci\u00f3n de manifiestos update-manifests : name : Update Kubernetes Manifests runs-on : ubuntu-latest needs : [ build-and-push ] if : github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' steps : - name : Checkout code uses : actions/checkout@v4 with : token : ${{ secrets.GITHUB_TOKEN }} fetch-depth : 0 - name : Configure Git run : | git config --local user.email \"action@github.com\" git config --local user.name \"GitHub Action\" - name : Update deployment manifest run : | IMAGE_TAG=\"${{ github.sha }}\" if [[ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]]; then IMAGE_TAG=\"${{ github.event.inputs.environment }}-${{ github.sha }}\" fi sed -i \"s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|\" Kubernetes/deployment.yaml echo \"Updated image tag to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}\" - name : Commit and push changes run : | git add Kubernetes/deployment.yaml if git diff --staged --quiet; then echo \"No changes to commit\" else git commit -m \"\ud83e\udd16 Update image tag to ${{ github.sha }} - Updated deployment manifest with new image - Triggered by: ${{ github.event_name }} - Commit: ${{ github.sha }} - Workflow: ${{ github.workflow }}\" git push origin main fi # Job de notificaciones notify : name : Send Notifications runs-on : ubuntu-latest needs : [ build-and-push , update-manifests ] if : always() steps : - name : Notify Slack on Success if : needs.build-and-push.result == 'success' && needs.update-manifests.result == 'success' uses : rtCamp/action-slack-notify@v2 env : SLACK_WEBHOOK : ${{ secrets.SLACK_WEBHOOK }} SLACK_CHANNEL : gitops-deployments SLACK_COLOR : good SLACK_MESSAGE : | \u2705 GitOps deployment successful! Repository: ${{ github.repository }} Branch: ${{ github.ref_name }} Commit: ${{ github.sha }} Image: ${{ needs.build-and-push.outputs.image-tags }} ArgoCD will automatically sync the changes. - name : Notify Slack on Failure if : needs.build-and-push.result == 'failure' || needs.update-manifests.result == 'failure' uses : rtCamp/action-slack-notify@v2 env : SLACK_WEBHOOK : ${{ secrets.SLACK_WEBHOOK }} SLACK_CHANNEL : gitops-deployments SLACK_COLOR : danger SLACK_MESSAGE : | \u274c GitOps deployment failed! Repository: ${{ github.repository }} Branch: ${{ github.ref_name }} Commit: ${{ github.sha }} Please check the workflow logs for details. Workflows Adicionales \u00b6 Workflow de Release (.github/workflows/release.yml) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 name : Create Release on : push : tags : - 'v*.*.*' env : REGISTRY : ghcr.io IMAGE_NAME : ${{ github.repository }} jobs : create-release : name : Create GitHub Release runs-on : ubuntu-latest permissions : contents : write packages : write steps : - name : Checkout code uses : actions/checkout@v4 with : fetch-depth : 0 - name : Generate changelog id : changelog run : | # Generar changelog basado en commits PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo \"\") if [ -z \"$PREVIOUS_TAG\" ]; then CHANGELOG=$(git log --pretty=format:\"- %s\" --no-merges) else CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:\"- %s\" --no-merges) fi echo \"CHANGELOG<<EOF\" >> $GITHUB_OUTPUT echo \"$CHANGELOG\" >> $GITHUB_OUTPUT echo \"EOF\" >> $GITHUB_OUTPUT - name : Create Release uses : softprops/action-gh-release@v1 with : name : Release ${{ github.ref_name }} body : | ## Changes in this release ${{ steps.changelog.outputs.CHANGELOG }} ## Docker Images - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}` - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest` ## Deployment This release will be automatically deployed via ArgoCD. draft : false prerelease : false generate_release_notes : true build-release-image : name : Build Release Image runs-on : ubuntu-latest needs : [ create-release ] permissions : contents : read packages : write steps : - name : Checkout code uses : actions/checkout@v4 - name : Set up Docker Buildx uses : docker/setup-buildx-action@v3 - name : Log in to Container Registry uses : docker/login-action@v3 with : registry : ${{ env.REGISTRY }} username : ${{ github.actor }} password : ${{ secrets.GITHUB_TOKEN }} - name : Extract version from tag id : version run : echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT - name : Build and push release image uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile platforms : linux/amd64,linux/arm64 push : true tags : | ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest labels : | org.opencontainers.image.title=GitOps Demo Application org.opencontainers.image.description=Simple web application for GitOps demonstration org.opencontainers.image.version=${{ steps.version.outputs.VERSION }} org.opencontainers.image.vendor=Portfolio-jaime cache-from : type=gha cache-to : type=gha,mode=max Workflow de Cleanup (.github/workflows/cleanup.yml) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 name : Cleanup Old Images on : schedule : - cron : '0 2 * * 0' # Weekly on Sunday at 2 AM workflow_dispatch : jobs : cleanup-images : name : Delete Old Container Images runs-on : ubuntu-latest permissions : contents : read packages : write steps : - name : Delete old container images uses : actions/delete-package-versions@v4 with : package-name : ${{ github.event.repository.name }} package-type : 'container' min-versions-to-keep : 10 delete-only-untagged-versions : false ignore-versions : '^latest$|^v\\d+\\.\\d+\\.\\d+$' Configuraciones de Seguridad \u00b6 Dependabot (.github/dependabot.yml) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 version : 2 updates : - package-ecosystem : \"docker\" directory : \"/Docker\" schedule : interval : \"weekly\" reviewers : - \"Portfolio-jaime\" labels : - \"dependencies\" - \"docker\" - package-ecosystem : \"npm\" directory : \"/\" schedule : interval : \"weekly\" reviewers : - \"Portfolio-jaime\" labels : - \"dependencies\" - \"javascript\" - package-ecosystem : \"github-actions\" directory : \"/\" schedule : interval : \"weekly\" reviewers : - \"Portfolio-jaime\" labels : - \"dependencies\" - \"github-actions\" Branch Protection Rules \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"required_status_checks\" : { \"strict\" : true , \"contexts\" : [ \"Security Analysis\" , \"Run Tests\" , \"Build and Push Docker Image\" ] }, \"enforce_admins\" : false , \"required_pull_request_reviews\" : { \"required_approving_review_count\" : 1 , \"dismiss_stale_reviews\" : true , \"require_code_owner_reviews\" : true }, \"restrictions\" : null , \"allow_force_pushes\" : false , \"allow_deletions\" : false , \"block_creations\" : false , \"required_conversation_resolution\" : true } Secrets y Variables \u00b6 Repository Secrets \u00b6 1 2 3 4 5 6 7 8 9 # Secrets requeridos en GitHub SLACK_WEBHOOK = https://hooks.slack.com/services/... ARGOCD_SERVER = argocd.example.com ARGOCD_AUTH_TOKEN = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... # Variables de entorno REGISTRY_URL = ghcr.io DEPLOYMENT_ENVIRONMENT = production MONITORING_ENABLED = true Environment-specific Secrets \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Para diferentes entornos environments : development : secrets : KUBE_CONFIG : ${{ secrets.DEV_KUBE_CONFIG }} REGISTRY : ghcr.io staging : secrets : KUBE_CONFIG : ${{ secrets.STAGING_KUBE_CONFIG }} REGISTRY : ghcr.io production : secrets : KUBE_CONFIG : ${{ secrets.PROD_KUBE_CONFIG }} REGISTRY : ghcr.io protection_rules : required_reviewers : 2 Templates de Issues y PRs \u00b6 Pull Request Template (.github/pull_request_template.md) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ## Description Brief description of the changes in this PR. ## Type of Change - [ ] Bug fix (non-breaking change which fixes an issue) - [ ] New feature (non-breaking change which adds functionality) - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected) - [ ] Documentation update - [ ] Infrastructure change ## Testing - [ ] Unit tests pass locally - [ ] Integration tests pass locally - [ ] Manual testing completed - [ ] Security scan completed ## Deployment - [ ] Changes are backward compatible - [ ] Database migrations included (if applicable) - [ ] Configuration changes documented - [ ] Monitoring/alerting updated (if applicable) ## Checklist - [ ] Code follows the project's style guidelines - [ ] Self-review of code completed - [ ] Code is properly commented - [ ] Documentation updated - [ ] No new warnings introduced Issue Templates (.github/ISSUE_TEMPLATE/) \u00b6 Bug Report (bug_report.yml) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 name : Bug Report description : Create a bug report to help improve the project title : \"[BUG] \" labels : [ \"bug\" , \"triage\" ] body : - type : markdown attributes : value : | Thank you for reporting a bug! Please fill out the information below. - type : textarea id : description attributes : label : Description description : Clear description of the bug validations : required : true - type : textarea id : reproduction attributes : label : Steps to Reproduce description : Steps to reproduce the behavior validations : required : true - type : textarea id : expected attributes : label : Expected Behavior description : What you expected to happen validations : required : true - type : textarea id : environment attributes : label : Environment description : | - Kubernetes version: - ArgoCD version: - Browser: value : | - Kubernetes version: - ArgoCD version: - Browser: validations : required : true Monitoreo de Workflows \u00b6 M\u00e9tricas de CI/CD \u00b6 Build Duration : Tiempo de construcci\u00f3n promedio Success Rate : Tasa de \u00e9xito de deployments Lead Time : Tiempo desde commit hasta deployment Frequency : Frecuencia de deployments Alertas \u00b6 Fallos en pipeline Vulnerabilidades detectadas Tiempo de build excesivo Fallos en tests","title":"GitHub Actions"},{"location":"github-actions/#github-actions-cicd-pipeline","text":"","title":"GitHub Actions CI/CD Pipeline"},{"location":"github-actions/#configuracion-principal","text":"","title":"Configuraci\u00f3n Principal"},{"location":"github-actions/#workflow-cicd-githubworkflowscdyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 name : GitOps CI/CD Pipeline on : push : branches : [ main , develop ] pull_request : branches : [ main ] types : [ opened , synchronize , reopened ] workflow_dispatch : inputs : environment : description : 'Environment to deploy' required : true default : 'development' type : choice options : - development - staging - production env : REGISTRY : ghcr.io IMAGE_NAME : ${{ github.repository }} DOCKER_BUILDKIT : 1 jobs : # Job de an\u00e1lisis de c\u00f3digo y seguridad security-scan : name : Security Analysis runs-on : ubuntu-latest permissions : contents : read security-events : write steps : - name : Checkout code uses : actions/checkout@v4 with : fetch-depth : 0 - name : Run Trivy vulnerability scanner uses : aquasecurity/trivy-action@master with : scan-type : 'fs' scan-ref : '.' format : 'sarif' output : 'trivy-results.sarif' - name : Upload Trivy scan results uses : github/codeql-action/upload-sarif@v3 if : always() with : sarif_file : 'trivy-results.sarif' - name : Run Hadolint uses : hadolint/hadolint-action@v3.1.0 with : dockerfile : Docker/Dockerfile format : sarif output-file : hadolint-results.sarif no-fail : true - name : Upload Hadolint results uses : github/codeql-action/upload-sarif@v3 if : always() with : sarif_file : hadolint-results.sarif # Job de testing test : name : Run Tests runs-on : ubuntu-latest needs : [ security-scan ] steps : - name : Checkout code uses : actions/checkout@v4 - name : Set up Node.js uses : actions/setup-node@v4 with : node-version : '18' cache : 'npm' - name : Install dependencies run : npm ci - name : Run unit tests run : npm test - name : Run integration tests run : npm run test:integration - name : Upload test results uses : actions/upload-artifact@v4 if : always() with : name : test-results path : | coverage/ test-results.xml # Job de construcci\u00f3n y push de imagen build-and-push : name : Build and Push Docker Image runs-on : ubuntu-latest needs : [ test ] permissions : contents : read packages : write outputs : image-digest : ${{ steps.build.outputs.digest }} image-tags : ${{ steps.meta.outputs.tags }} steps : - name : Checkout code uses : actions/checkout@v4 - name : Set up Docker Buildx uses : docker/setup-buildx-action@v3 - name : Log in to Container Registry uses : docker/login-action@v3 with : registry : ${{ env.REGISTRY }} username : ${{ github.actor }} password : ${{ secrets.GITHUB_TOKEN }} - name : Extract metadata id : meta uses : docker/metadata-action@v5 with : images : ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} tags : | type=ref,event=branch type=ref,event=pr type=sha,prefix={{branch}}- type=raw,value=latest,enable={{is_default_branch}} type=raw,value={{date 'YYYY-MM-DD-HHmmss'}} labels : | org.opencontainers.image.title=GitOps Demo Application org.opencontainers.image.description=Simple web application for GitOps demonstration org.opencontainers.image.vendor=Portfolio-jaime org.opencontainers.image.licenses=MIT - name : Build and push Docker image id : build uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile platforms : linux/amd64,linux/arm64 push : true tags : ${{ steps.meta.outputs.tags }} labels : ${{ steps.meta.outputs.labels }} cache-from : type=gha cache-to : type=gha,mode=max provenance : false sbom : true - name : Run Trivy scanner on image uses : aquasecurity/trivy-action@master with : image-ref : ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} format : 'sarif' output : 'trivy-image-results.sarif' - name : Upload Trivy scan results uses : github/codeql-action/upload-sarif@v3 if : always() with : sarif_file : 'trivy-image-results.sarif' # Job de actualizaci\u00f3n de manifiestos update-manifests : name : Update Kubernetes Manifests runs-on : ubuntu-latest needs : [ build-and-push ] if : github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' steps : - name : Checkout code uses : actions/checkout@v4 with : token : ${{ secrets.GITHUB_TOKEN }} fetch-depth : 0 - name : Configure Git run : | git config --local user.email \"action@github.com\" git config --local user.name \"GitHub Action\" - name : Update deployment manifest run : | IMAGE_TAG=\"${{ github.sha }}\" if [[ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]]; then IMAGE_TAG=\"${{ github.event.inputs.environment }}-${{ github.sha }}\" fi sed -i \"s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|\" Kubernetes/deployment.yaml echo \"Updated image tag to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}\" - name : Commit and push changes run : | git add Kubernetes/deployment.yaml if git diff --staged --quiet; then echo \"No changes to commit\" else git commit -m \"\ud83e\udd16 Update image tag to ${{ github.sha }} - Updated deployment manifest with new image - Triggered by: ${{ github.event_name }} - Commit: ${{ github.sha }} - Workflow: ${{ github.workflow }}\" git push origin main fi # Job de notificaciones notify : name : Send Notifications runs-on : ubuntu-latest needs : [ build-and-push , update-manifests ] if : always() steps : - name : Notify Slack on Success if : needs.build-and-push.result == 'success' && needs.update-manifests.result == 'success' uses : rtCamp/action-slack-notify@v2 env : SLACK_WEBHOOK : ${{ secrets.SLACK_WEBHOOK }} SLACK_CHANNEL : gitops-deployments SLACK_COLOR : good SLACK_MESSAGE : | \u2705 GitOps deployment successful! Repository: ${{ github.repository }} Branch: ${{ github.ref_name }} Commit: ${{ github.sha }} Image: ${{ needs.build-and-push.outputs.image-tags }} ArgoCD will automatically sync the changes. - name : Notify Slack on Failure if : needs.build-and-push.result == 'failure' || needs.update-manifests.result == 'failure' uses : rtCamp/action-slack-notify@v2 env : SLACK_WEBHOOK : ${{ secrets.SLACK_WEBHOOK }} SLACK_CHANNEL : gitops-deployments SLACK_COLOR : danger SLACK_MESSAGE : | \u274c GitOps deployment failed! Repository: ${{ github.repository }} Branch: ${{ github.ref_name }} Commit: ${{ github.sha }} Please check the workflow logs for details.","title":"Workflow CI/CD (.github/workflows/cd.yml)"},{"location":"github-actions/#workflows-adicionales","text":"","title":"Workflows Adicionales"},{"location":"github-actions/#workflow-de-release-githubworkflowsreleaseyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 name : Create Release on : push : tags : - 'v*.*.*' env : REGISTRY : ghcr.io IMAGE_NAME : ${{ github.repository }} jobs : create-release : name : Create GitHub Release runs-on : ubuntu-latest permissions : contents : write packages : write steps : - name : Checkout code uses : actions/checkout@v4 with : fetch-depth : 0 - name : Generate changelog id : changelog run : | # Generar changelog basado en commits PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo \"\") if [ -z \"$PREVIOUS_TAG\" ]; then CHANGELOG=$(git log --pretty=format:\"- %s\" --no-merges) else CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:\"- %s\" --no-merges) fi echo \"CHANGELOG<<EOF\" >> $GITHUB_OUTPUT echo \"$CHANGELOG\" >> $GITHUB_OUTPUT echo \"EOF\" >> $GITHUB_OUTPUT - name : Create Release uses : softprops/action-gh-release@v1 with : name : Release ${{ github.ref_name }} body : | ## Changes in this release ${{ steps.changelog.outputs.CHANGELOG }} ## Docker Images - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}` - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest` ## Deployment This release will be automatically deployed via ArgoCD. draft : false prerelease : false generate_release_notes : true build-release-image : name : Build Release Image runs-on : ubuntu-latest needs : [ create-release ] permissions : contents : read packages : write steps : - name : Checkout code uses : actions/checkout@v4 - name : Set up Docker Buildx uses : docker/setup-buildx-action@v3 - name : Log in to Container Registry uses : docker/login-action@v3 with : registry : ${{ env.REGISTRY }} username : ${{ github.actor }} password : ${{ secrets.GITHUB_TOKEN }} - name : Extract version from tag id : version run : echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT - name : Build and push release image uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile platforms : linux/amd64,linux/arm64 push : true tags : | ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest labels : | org.opencontainers.image.title=GitOps Demo Application org.opencontainers.image.description=Simple web application for GitOps demonstration org.opencontainers.image.version=${{ steps.version.outputs.VERSION }} org.opencontainers.image.vendor=Portfolio-jaime cache-from : type=gha cache-to : type=gha,mode=max","title":"Workflow de Release (.github/workflows/release.yml)"},{"location":"github-actions/#workflow-de-cleanup-githubworkflowscleanupyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 name : Cleanup Old Images on : schedule : - cron : '0 2 * * 0' # Weekly on Sunday at 2 AM workflow_dispatch : jobs : cleanup-images : name : Delete Old Container Images runs-on : ubuntu-latest permissions : contents : read packages : write steps : - name : Delete old container images uses : actions/delete-package-versions@v4 with : package-name : ${{ github.event.repository.name }} package-type : 'container' min-versions-to-keep : 10 delete-only-untagged-versions : false ignore-versions : '^latest$|^v\\d+\\.\\d+\\.\\d+$'","title":"Workflow de Cleanup (.github/workflows/cleanup.yml)"},{"location":"github-actions/#configuraciones-de-seguridad","text":"","title":"Configuraciones de Seguridad"},{"location":"github-actions/#dependabot-githubdependabotyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 version : 2 updates : - package-ecosystem : \"docker\" directory : \"/Docker\" schedule : interval : \"weekly\" reviewers : - \"Portfolio-jaime\" labels : - \"dependencies\" - \"docker\" - package-ecosystem : \"npm\" directory : \"/\" schedule : interval : \"weekly\" reviewers : - \"Portfolio-jaime\" labels : - \"dependencies\" - \"javascript\" - package-ecosystem : \"github-actions\" directory : \"/\" schedule : interval : \"weekly\" reviewers : - \"Portfolio-jaime\" labels : - \"dependencies\" - \"github-actions\"","title":"Dependabot (.github/dependabot.yml)"},{"location":"github-actions/#branch-protection-rules","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 { \"required_status_checks\" : { \"strict\" : true , \"contexts\" : [ \"Security Analysis\" , \"Run Tests\" , \"Build and Push Docker Image\" ] }, \"enforce_admins\" : false , \"required_pull_request_reviews\" : { \"required_approving_review_count\" : 1 , \"dismiss_stale_reviews\" : true , \"require_code_owner_reviews\" : true }, \"restrictions\" : null , \"allow_force_pushes\" : false , \"allow_deletions\" : false , \"block_creations\" : false , \"required_conversation_resolution\" : true }","title":"Branch Protection Rules"},{"location":"github-actions/#secrets-y-variables","text":"","title":"Secrets y Variables"},{"location":"github-actions/#repository-secrets","text":"1 2 3 4 5 6 7 8 9 # Secrets requeridos en GitHub SLACK_WEBHOOK = https://hooks.slack.com/services/... ARGOCD_SERVER = argocd.example.com ARGOCD_AUTH_TOKEN = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... # Variables de entorno REGISTRY_URL = ghcr.io DEPLOYMENT_ENVIRONMENT = production MONITORING_ENABLED = true","title":"Repository Secrets"},{"location":"github-actions/#environment-specific-secrets","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Para diferentes entornos environments : development : secrets : KUBE_CONFIG : ${{ secrets.DEV_KUBE_CONFIG }} REGISTRY : ghcr.io staging : secrets : KUBE_CONFIG : ${{ secrets.STAGING_KUBE_CONFIG }} REGISTRY : ghcr.io production : secrets : KUBE_CONFIG : ${{ secrets.PROD_KUBE_CONFIG }} REGISTRY : ghcr.io protection_rules : required_reviewers : 2","title":"Environment-specific Secrets"},{"location":"github-actions/#templates-de-issues-y-prs","text":"","title":"Templates de Issues y PRs"},{"location":"github-actions/#pull-request-template-githubpull_request_templatemd","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ## Description Brief description of the changes in this PR. ## Type of Change - [ ] Bug fix (non-breaking change which fixes an issue) - [ ] New feature (non-breaking change which adds functionality) - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected) - [ ] Documentation update - [ ] Infrastructure change ## Testing - [ ] Unit tests pass locally - [ ] Integration tests pass locally - [ ] Manual testing completed - [ ] Security scan completed ## Deployment - [ ] Changes are backward compatible - [ ] Database migrations included (if applicable) - [ ] Configuration changes documented - [ ] Monitoring/alerting updated (if applicable) ## Checklist - [ ] Code follows the project's style guidelines - [ ] Self-review of code completed - [ ] Code is properly commented - [ ] Documentation updated - [ ] No new warnings introduced","title":"Pull Request Template (.github/pull_request_template.md)"},{"location":"github-actions/#issue-templates-githubissue_template","text":"","title":"Issue Templates (.github/ISSUE_TEMPLATE/)"},{"location":"github-actions/#bug-report-bug_reportyml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 name : Bug Report description : Create a bug report to help improve the project title : \"[BUG] \" labels : [ \"bug\" , \"triage\" ] body : - type : markdown attributes : value : | Thank you for reporting a bug! Please fill out the information below. - type : textarea id : description attributes : label : Description description : Clear description of the bug validations : required : true - type : textarea id : reproduction attributes : label : Steps to Reproduce description : Steps to reproduce the behavior validations : required : true - type : textarea id : expected attributes : label : Expected Behavior description : What you expected to happen validations : required : true - type : textarea id : environment attributes : label : Environment description : | - Kubernetes version: - ArgoCD version: - Browser: value : | - Kubernetes version: - ArgoCD version: - Browser: validations : required : true","title":"Bug Report (bug_report.yml)"},{"location":"github-actions/#monitoreo-de-workflows","text":"","title":"Monitoreo de Workflows"},{"location":"github-actions/#metricas-de-cicd","text":"Build Duration : Tiempo de construcci\u00f3n promedio Success Rate : Tasa de \u00e9xito de deployments Lead Time : Tiempo desde commit hasta deployment Frequency : Frecuencia de deployments","title":"M\u00e9tricas de CI/CD"},{"location":"github-actions/#alertas","text":"Fallos en pipeline Vulnerabilidades detectadas Tiempo de build excesivo Fallos en tests","title":"Alertas"},{"location":"kubernetes/","text":"Kubernetes Configuration \u00b6 Manifiestos Base \u00b6 Namespace \u00b6 1 2 3 4 5 6 7 8 9 10 apiVersion : v1 kind : Namespace metadata : name : gitops-demo labels : name : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/part-of : gitops-demo annotations : description : \"Namespace for GitOps demo application\" Deployment \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 apiVersion : apps/v1 kind : Deployment metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/instance : gitops-demo app.kubernetes.io/version : \"1.0\" app.kubernetes.io/component : webapp app.kubernetes.io/part-of : gitops-demo app.kubernetes.io/managed-by : argocd spec : replicas : 3 selector : matchLabels : app : gitops-demo template : metadata : labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/instance : gitops-demo app.kubernetes.io/version : \"1.0\" app.kubernetes.io/component : webapp annotations : prometheus.io/scrape : \"true\" prometheus.io/port : \"8080\" prometheus.io/path : \"/metrics\" spec : serviceAccountName : gitops-demo securityContext : runAsNonRoot : true runAsUser : 1001 fsGroup : 1001 containers : - name : webapp image : ghcr.io/portfolio-jaime/gitops:latest imagePullPolicy : Always ports : - name : http containerPort : 8080 protocol : TCP env : - name : NODE_ENV value : \"production\" - name : PORT value : \"8080\" resources : requests : memory : \"64Mi\" cpu : \"100m\" limits : memory : \"256Mi\" cpu : \"500m\" securityContext : allowPrivilegeEscalation : false readOnlyRootFilesystem : true runAsNonRoot : true runAsUser : 1001 capabilities : drop : - ALL livenessProbe : httpGet : path : /health port : http initialDelaySeconds : 30 periodSeconds : 10 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 3 readinessProbe : httpGet : path : /health port : http initialDelaySeconds : 5 periodSeconds : 5 timeoutSeconds : 3 successThreshold : 1 failureThreshold : 3 startupProbe : httpGet : path : /health port : http initialDelaySeconds : 10 periodSeconds : 5 timeoutSeconds : 3 successThreshold : 1 failureThreshold : 30 volumeMounts : - name : tmp mountPath : /tmp - name : var-run mountPath : /var/run - name : var-cache-nginx mountPath : /var/cache/nginx volumes : - name : tmp emptyDir : {} - name : var-run emptyDir : {} - name : var-cache-nginx emptyDir : {} affinity : podAntiAffinity : preferredDuringSchedulingIgnoredDuringExecution : - weight : 100 podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - gitops-demo topologyKey : kubernetes.io/hostname terminationGracePeriodSeconds : 30 Service \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 apiVersion : v1 kind : Service metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/instance : gitops-demo app.kubernetes.io/component : webapp app.kubernetes.io/part-of : gitops-demo annotations : service.beta.kubernetes.io/aws-load-balancer-type : \"nlb\" spec : type : ClusterIP ports : - port : 80 targetPort : http protocol : TCP name : http selector : app : gitops-demo ServiceAccount y RBAC \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 apiVersion : v1 kind : ServiceAccount metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : serviceaccount app.kubernetes.io/part-of : gitops-demo automountServiceAccountToken : false --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : rbac app.kubernetes.io/part-of : gitops-demo rules : - apiGroups : [ \"\" ] resources : [ \"configmaps\" , \"secrets\" ] verbs : [ \"get\" , \"list\" ] - apiGroups : [ \"\" ] resources : [ \"events\" ] verbs : [ \"create\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : rbac app.kubernetes.io/part-of : gitops-demo subjects : - kind : ServiceAccount name : gitops-demo namespace : gitops-demo roleRef : kind : Role name : gitops-demo apiGroup : rbac.authorization.k8s.io Configuraciones Avanzadas \u00b6 HorizontalPodAutoscaler \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 apiVersion : autoscaling/v2 kind : HorizontalPodAutoscaler metadata : name : gitops-demo-hpa namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : autoscaler app.kubernetes.io/part-of : gitops-demo spec : scaleTargetRef : apiVersion : apps/v1 kind : Deployment name : gitops-demo minReplicas : 2 maxReplicas : 10 metrics : - type : Resource resource : name : cpu target : type : Utilization averageUtilization : 70 - type : Resource resource : name : memory target : type : Utilization averageUtilization : 80 behavior : scaleDown : stabilizationWindowSeconds : 300 policies : - type : Percent value : 50 periodSeconds : 60 scaleUp : stabilizationWindowSeconds : 0 policies : - type : Percent value : 100 periodSeconds : 15 - type : Pods value : 4 periodSeconds : 15 selectPolicy : Max PodDisruptionBudget \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 apiVersion : policy/v1 kind : PodDisruptionBudget metadata : name : gitops-demo-pdb namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : pdb app.kubernetes.io/part-of : gitops-demo spec : minAvailable : 1 selector : matchLabels : app : gitops-demo NetworkPolicy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : gitops-demo-netpol namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : network-policy app.kubernetes.io/part-of : gitops-demo spec : podSelector : matchLabels : app : gitops-demo policyTypes : - Ingress - Egress ingress : - from : - namespaceSelector : matchLabels : name : ingress-nginx - namespaceSelector : matchLabels : name : monitoring ports : - protocol : TCP port : 8080 egress : - to : [] ports : - protocol : TCP port : 53 - protocol : UDP port : 53 - to : - namespaceSelector : matchLabels : name : kube-system ports : - protocol : TCP port : 443 Configuraci\u00f3n de Ingress \u00b6 Nginx Ingress \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : ingress app.kubernetes.io/part-of : gitops-demo annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/ssl-redirect : \"true\" nginx.ingress.kubernetes.io/force-ssl-redirect : \"true\" nginx.ingress.kubernetes.io/rewrite-target : / nginx.ingress.kubernetes.io/rate-limit : \"100\" nginx.ingress.kubernetes.io/rate-limit-window : \"1m\" cert-manager.io/cluster-issuer : letsencrypt-prod nginx.ingress.kubernetes.io/configuration-snippet : | add_header X-Frame-Options \"SAMEORIGIN\" always; add_header X-Content-Type-Options \"nosniff\" always; add_header X-XSS-Protection \"1; mode=block\" always; spec : tls : - hosts : - gitops-demo.example.com secretName : gitops-demo-tls rules : - host : gitops-demo.example.com http : paths : - path : / pathType : Prefix backend : service : name : gitops-demo port : number : 80 Istio VirtualService \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 apiVersion : networking.istio.io/v1alpha3 kind : VirtualService metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : virtualservice app.kubernetes.io/part-of : gitops-demo spec : hosts : - gitops-demo.example.com gateways : - gitops-demo-gateway http : - match : - uri : prefix : / route : - destination : host : gitops-demo port : number : 80 retries : attempts : 3 perTryTimeout : 2s timeout : 10s --- apiVersion : networking.istio.io/v1alpha3 kind : Gateway metadata : name : gitops-demo-gateway namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : gateway app.kubernetes.io/part-of : gitops-demo spec : selector : istio : ingressgateway servers : - port : number : 443 name : https protocol : HTTPS tls : mode : SIMPLE credentialName : gitops-demo-tls hosts : - gitops-demo.example.com - port : number : 80 name : http protocol : HTTP hosts : - gitops-demo.example.com tls : httpsRedirect : true Monitoreo y Observabilidad \u00b6 ServiceMonitor (Prometheus) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : monitoring app.kubernetes.io/part-of : gitops-demo spec : selector : matchLabels : app : gitops-demo endpoints : - port : http path : /metrics interval : 30s scrapeTimeout : 10s ConfigMap para Configuraci\u00f3n \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 apiVersion : v1 kind : ConfigMap metadata : name : gitops-demo-config namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : config app.kubernetes.io/part-of : gitops-demo data : nginx.conf : | events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format json_combined escape=json '{' '\"time_local\":\"$time_local\",' '\"remote_addr\":\"$remote_addr\",' '\"remote_user\":\"$remote_user\",' '\"request\":\"$request\",' '\"status\": \"$status\",' '\"body_bytes_sent\":\"$body_bytes_sent\",' '\"request_time\":\"$request_time\",' '\"http_referrer\":\"$http_referer\",' '\"http_user_agent\":\"$http_user_agent\"' '}'; access_log /var/log/nginx/access.log json_combined; error_log /var/log/nginx/error.log warn; sendfile on; keepalive_timeout 65; server { listen 8080; server_name localhost; root /usr/share/nginx/html; index index.html; location / { try_files $uri $uri/ =404; } location /health { access_log off; return 200 \"healthy\\n\"; add_header Content-Type text/plain; } location /metrics { access_log off; return 200 \"# HELP nginx_up Nginx status\\n# TYPE nginx_up gauge\\nnginx_up 1\\n\"; add_header Content-Type text/plain; } } } Comandos \u00datiles \u00b6 Despliegue \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Aplicar todos los manifiestos kubectl apply -f Kubernetes/ -n gitops-demo # Verificar estado del despliegue kubectl rollout status deployment/gitops-demo -n gitops-demo # Ver logs kubectl logs -l app = gitops-demo -n gitops-demo --tail = 100 -f # Describir deployment kubectl describe deployment gitops-demo -n gitops-demo Debugging \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Exec en pod kubectl exec -it deployment/gitops-demo -n gitops-demo -- /bin/sh # Port forward para testing local kubectl port-forward svc/gitops-demo 8080 :80 -n gitops-demo # Ver eventos kubectl get events -n gitops-demo --sort-by = .metadata.creationTimestamp # Verificar recursos kubectl top pods -n gitops-demo Limpieza \u00b6 1 2 3 4 5 6 7 8 # Eliminar deployment kubectl delete deployment gitops-demo -n gitops-demo # Eliminar todo el namespace kubectl delete namespace gitops-demo # Eliminar recursos espec\u00edficos kubectl delete -f Kubernetes/ -n gitops-demo","title":"Kubernetes"},{"location":"kubernetes/#kubernetes-configuration","text":"","title":"Kubernetes Configuration"},{"location":"kubernetes/#manifiestos-base","text":"","title":"Manifiestos Base"},{"location":"kubernetes/#namespace","text":"1 2 3 4 5 6 7 8 9 10 apiVersion : v1 kind : Namespace metadata : name : gitops-demo labels : name : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/part-of : gitops-demo annotations : description : \"Namespace for GitOps demo application\"","title":"Namespace"},{"location":"kubernetes/#deployment","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 apiVersion : apps/v1 kind : Deployment metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/instance : gitops-demo app.kubernetes.io/version : \"1.0\" app.kubernetes.io/component : webapp app.kubernetes.io/part-of : gitops-demo app.kubernetes.io/managed-by : argocd spec : replicas : 3 selector : matchLabels : app : gitops-demo template : metadata : labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/instance : gitops-demo app.kubernetes.io/version : \"1.0\" app.kubernetes.io/component : webapp annotations : prometheus.io/scrape : \"true\" prometheus.io/port : \"8080\" prometheus.io/path : \"/metrics\" spec : serviceAccountName : gitops-demo securityContext : runAsNonRoot : true runAsUser : 1001 fsGroup : 1001 containers : - name : webapp image : ghcr.io/portfolio-jaime/gitops:latest imagePullPolicy : Always ports : - name : http containerPort : 8080 protocol : TCP env : - name : NODE_ENV value : \"production\" - name : PORT value : \"8080\" resources : requests : memory : \"64Mi\" cpu : \"100m\" limits : memory : \"256Mi\" cpu : \"500m\" securityContext : allowPrivilegeEscalation : false readOnlyRootFilesystem : true runAsNonRoot : true runAsUser : 1001 capabilities : drop : - ALL livenessProbe : httpGet : path : /health port : http initialDelaySeconds : 30 periodSeconds : 10 timeoutSeconds : 5 successThreshold : 1 failureThreshold : 3 readinessProbe : httpGet : path : /health port : http initialDelaySeconds : 5 periodSeconds : 5 timeoutSeconds : 3 successThreshold : 1 failureThreshold : 3 startupProbe : httpGet : path : /health port : http initialDelaySeconds : 10 periodSeconds : 5 timeoutSeconds : 3 successThreshold : 1 failureThreshold : 30 volumeMounts : - name : tmp mountPath : /tmp - name : var-run mountPath : /var/run - name : var-cache-nginx mountPath : /var/cache/nginx volumes : - name : tmp emptyDir : {} - name : var-run emptyDir : {} - name : var-cache-nginx emptyDir : {} affinity : podAntiAffinity : preferredDuringSchedulingIgnoredDuringExecution : - weight : 100 podAffinityTerm : labelSelector : matchExpressions : - key : app operator : In values : - gitops-demo topologyKey : kubernetes.io/hostname terminationGracePeriodSeconds : 30","title":"Deployment"},{"location":"kubernetes/#service","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 apiVersion : v1 kind : Service metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/instance : gitops-demo app.kubernetes.io/component : webapp app.kubernetes.io/part-of : gitops-demo annotations : service.beta.kubernetes.io/aws-load-balancer-type : \"nlb\" spec : type : ClusterIP ports : - port : 80 targetPort : http protocol : TCP name : http selector : app : gitops-demo","title":"Service"},{"location":"kubernetes/#serviceaccount-y-rbac","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 apiVersion : v1 kind : ServiceAccount metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : serviceaccount app.kubernetes.io/part-of : gitops-demo automountServiceAccountToken : false --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : rbac app.kubernetes.io/part-of : gitops-demo rules : - apiGroups : [ \"\" ] resources : [ \"configmaps\" , \"secrets\" ] verbs : [ \"get\" , \"list\" ] - apiGroups : [ \"\" ] resources : [ \"events\" ] verbs : [ \"create\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : rbac app.kubernetes.io/part-of : gitops-demo subjects : - kind : ServiceAccount name : gitops-demo namespace : gitops-demo roleRef : kind : Role name : gitops-demo apiGroup : rbac.authorization.k8s.io","title":"ServiceAccount y RBAC"},{"location":"kubernetes/#configuraciones-avanzadas","text":"","title":"Configuraciones Avanzadas"},{"location":"kubernetes/#horizontalpodautoscaler","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 apiVersion : autoscaling/v2 kind : HorizontalPodAutoscaler metadata : name : gitops-demo-hpa namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : autoscaler app.kubernetes.io/part-of : gitops-demo spec : scaleTargetRef : apiVersion : apps/v1 kind : Deployment name : gitops-demo minReplicas : 2 maxReplicas : 10 metrics : - type : Resource resource : name : cpu target : type : Utilization averageUtilization : 70 - type : Resource resource : name : memory target : type : Utilization averageUtilization : 80 behavior : scaleDown : stabilizationWindowSeconds : 300 policies : - type : Percent value : 50 periodSeconds : 60 scaleUp : stabilizationWindowSeconds : 0 policies : - type : Percent value : 100 periodSeconds : 15 - type : Pods value : 4 periodSeconds : 15 selectPolicy : Max","title":"HorizontalPodAutoscaler"},{"location":"kubernetes/#poddisruptionbudget","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 apiVersion : policy/v1 kind : PodDisruptionBudget metadata : name : gitops-demo-pdb namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : pdb app.kubernetes.io/part-of : gitops-demo spec : minAvailable : 1 selector : matchLabels : app : gitops-demo","title":"PodDisruptionBudget"},{"location":"kubernetes/#networkpolicy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 apiVersion : networking.k8s.io/v1 kind : NetworkPolicy metadata : name : gitops-demo-netpol namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : network-policy app.kubernetes.io/part-of : gitops-demo spec : podSelector : matchLabels : app : gitops-demo policyTypes : - Ingress - Egress ingress : - from : - namespaceSelector : matchLabels : name : ingress-nginx - namespaceSelector : matchLabels : name : monitoring ports : - protocol : TCP port : 8080 egress : - to : [] ports : - protocol : TCP port : 53 - protocol : UDP port : 53 - to : - namespaceSelector : matchLabels : name : kube-system ports : - protocol : TCP port : 443","title":"NetworkPolicy"},{"location":"kubernetes/#configuracion-de-ingress","text":"","title":"Configuraci\u00f3n de Ingress"},{"location":"kubernetes/#nginx-ingress","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 apiVersion : networking.k8s.io/v1 kind : Ingress metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : ingress app.kubernetes.io/part-of : gitops-demo annotations : kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/ssl-redirect : \"true\" nginx.ingress.kubernetes.io/force-ssl-redirect : \"true\" nginx.ingress.kubernetes.io/rewrite-target : / nginx.ingress.kubernetes.io/rate-limit : \"100\" nginx.ingress.kubernetes.io/rate-limit-window : \"1m\" cert-manager.io/cluster-issuer : letsencrypt-prod nginx.ingress.kubernetes.io/configuration-snippet : | add_header X-Frame-Options \"SAMEORIGIN\" always; add_header X-Content-Type-Options \"nosniff\" always; add_header X-XSS-Protection \"1; mode=block\" always; spec : tls : - hosts : - gitops-demo.example.com secretName : gitops-demo-tls rules : - host : gitops-demo.example.com http : paths : - path : / pathType : Prefix backend : service : name : gitops-demo port : number : 80","title":"Nginx Ingress"},{"location":"kubernetes/#istio-virtualservice","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 apiVersion : networking.istio.io/v1alpha3 kind : VirtualService metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : virtualservice app.kubernetes.io/part-of : gitops-demo spec : hosts : - gitops-demo.example.com gateways : - gitops-demo-gateway http : - match : - uri : prefix : / route : - destination : host : gitops-demo port : number : 80 retries : attempts : 3 perTryTimeout : 2s timeout : 10s --- apiVersion : networking.istio.io/v1alpha3 kind : Gateway metadata : name : gitops-demo-gateway namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : gateway app.kubernetes.io/part-of : gitops-demo spec : selector : istio : ingressgateway servers : - port : number : 443 name : https protocol : HTTPS tls : mode : SIMPLE credentialName : gitops-demo-tls hosts : - gitops-demo.example.com - port : number : 80 name : http protocol : HTTP hosts : - gitops-demo.example.com tls : httpsRedirect : true","title":"Istio VirtualService"},{"location":"kubernetes/#monitoreo-y-observabilidad","text":"","title":"Monitoreo y Observabilidad"},{"location":"kubernetes/#servicemonitor-prometheus","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 apiVersion : monitoring.coreos.com/v1 kind : ServiceMonitor metadata : name : gitops-demo namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : monitoring app.kubernetes.io/part-of : gitops-demo spec : selector : matchLabels : app : gitops-demo endpoints : - port : http path : /metrics interval : 30s scrapeTimeout : 10s","title":"ServiceMonitor (Prometheus)"},{"location":"kubernetes/#configmap-para-configuracion","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 apiVersion : v1 kind : ConfigMap metadata : name : gitops-demo-config namespace : gitops-demo labels : app : gitops-demo app.kubernetes.io/name : gitops-demo app.kubernetes.io/component : config app.kubernetes.io/part-of : gitops-demo data : nginx.conf : | events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format json_combined escape=json '{' '\"time_local\":\"$time_local\",' '\"remote_addr\":\"$remote_addr\",' '\"remote_user\":\"$remote_user\",' '\"request\":\"$request\",' '\"status\": \"$status\",' '\"body_bytes_sent\":\"$body_bytes_sent\",' '\"request_time\":\"$request_time\",' '\"http_referrer\":\"$http_referer\",' '\"http_user_agent\":\"$http_user_agent\"' '}'; access_log /var/log/nginx/access.log json_combined; error_log /var/log/nginx/error.log warn; sendfile on; keepalive_timeout 65; server { listen 8080; server_name localhost; root /usr/share/nginx/html; index index.html; location / { try_files $uri $uri/ =404; } location /health { access_log off; return 200 \"healthy\\n\"; add_header Content-Type text/plain; } location /metrics { access_log off; return 200 \"# HELP nginx_up Nginx status\\n# TYPE nginx_up gauge\\nnginx_up 1\\n\"; add_header Content-Type text/plain; } } }","title":"ConfigMap para Configuraci\u00f3n"},{"location":"kubernetes/#comandos-utiles","text":"","title":"Comandos \u00datiles"},{"location":"kubernetes/#despliegue","text":"1 2 3 4 5 6 7 8 9 10 11 # Aplicar todos los manifiestos kubectl apply -f Kubernetes/ -n gitops-demo # Verificar estado del despliegue kubectl rollout status deployment/gitops-demo -n gitops-demo # Ver logs kubectl logs -l app = gitops-demo -n gitops-demo --tail = 100 -f # Describir deployment kubectl describe deployment gitops-demo -n gitops-demo","title":"Despliegue"},{"location":"kubernetes/#debugging","text":"1 2 3 4 5 6 7 8 9 10 11 # Exec en pod kubectl exec -it deployment/gitops-demo -n gitops-demo -- /bin/sh # Port forward para testing local kubectl port-forward svc/gitops-demo 8080 :80 -n gitops-demo # Ver eventos kubectl get events -n gitops-demo --sort-by = .metadata.creationTimestamp # Verificar recursos kubectl top pods -n gitops-demo","title":"Debugging"},{"location":"kubernetes/#limpieza","text":"1 2 3 4 5 6 7 8 # Eliminar deployment kubectl delete deployment gitops-demo -n gitops-demo # Eliminar todo el namespace kubectl delete namespace gitops-demo # Eliminar recursos espec\u00edficos kubectl delete -f Kubernetes/ -n gitops-demo","title":"Limpieza"},{"location":"pipeline/","text":"Pipeline GitOps Completo \u00b6 Visi\u00f3n General del Pipeline \u00b6 El pipeline GitOps implementa un flujo automatizado desde el desarrollo hasta la producci\u00f3n, siguiendo las mejores pr\u00e1cticas de DevOps y GitOps. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 flowchart TD A[Developer Commit] --> B[GitHub Webhook] B --> C[GitHub Actions] C --> D[Security Scan] D --> E[Unit Tests] E --> F[Integration Tests] F --> G[Build Docker Image] G --> H[Push to Registry] H --> I[Update Manifests] I --> J[Git Commit] J --> K[ArgoCD Detects Change] K --> L[ArgoCD Sync] L --> M[Deploy to Kubernetes] M --> N[Health Checks] N --> O[Monitoring] O --> P[Notifications] Fases del Pipeline \u00b6 1. Fase de Validaci\u00f3n \u00b6 Security Scanning \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 - name : Trivy Filesystem Scan uses : aquasecurity/trivy-action@master with : scan-type : 'fs' scan-ref : '.' format : 'sarif' severity : 'CRITICAL,HIGH,MEDIUM' - name : Hadolint Dockerfile Scan uses : hadolint/hadolint-action@v3.1.0 with : dockerfile : Docker/Dockerfile failure-threshold : error Code Quality \u00b6 1 2 3 4 5 6 7 8 9 10 - name : SonarCloud Scan uses : SonarSource/sonarcloud-github-action@master env : GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} SONAR_TOKEN : ${{ secrets.SONAR_TOKEN }} - name : CodeQL Analysis uses : github/codeql-action/analyze@v3 with : languages : javascript 2. Fase de Testing \u00b6 Testing Strategy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 test-matrix : strategy : matrix : node-version : [ 16 , 18 , 20 ] os : [ ubuntu-latest , windows-latest ] steps : - name : Unit Tests run : | npm test -- --coverage npm run test:unit - name : Integration Tests run : | docker-compose -f docker-compose.test.yml up -d npm run test:integration docker-compose -f docker-compose.test.yml down - name : E2E Tests run : | npm run test:e2e Performance Tests \u00b6 1 2 3 4 5 6 - name : Lighthouse Performance uses : treosh/lighthouse-ci-action@v10 with : configPath : '.github/lighthouse/lighthouserc.json' uploadArtifacts : true temporaryPublicStorage : true 3. Fase de Build \u00b6 Multi-platform Build \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - name : Set up Docker Buildx uses : docker/setup-buildx-action@v3 with : platforms : linux/amd64,linux/arm64 - name : Build Multi-arch Image uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile platforms : linux/amd64,linux/arm64 push : true tags : | ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest cache-from : type=gha cache-to : type=gha,mode=max Image Optimization \u00b6 1 2 3 4 5 6 7 8 - name : Optimize Image run : | # Usar dive para analizar layers docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\ wagoodman/dive:latest \\ ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \\ --ci \\ --lowestEfficiency=0.95 4. Fase de Deployment \u00b6 GitOps Update \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 - name : Update Kubernetes Manifests run : | # Clonar el repositorio de configuraci\u00f3n git clone https://github.com/Portfolio-jaime/gitops-config.git cd gitops-config # Actualizar imagen en m\u00faltiples entornos environments=(\"dev\" \"staging\" \"prod\") for env in \"${environments[@]}\"; do if [[ \"${{ github.ref }}\" == \"refs/heads/main\" ]] || [[ \"$env\" == \"dev\" ]]; then yq eval \".spec.template.spec.containers[0].image = \\\"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\\\"\" \\ -i environments/$env/deployment.yaml fi done # Commit y push git add . git commit -m \"Update ${{ github.repository }} to ${{ github.sha }}\" git push Rollback Strategy \u00b6 1 2 3 4 5 6 7 8 9 10 - name : Prepare Rollback if : failure() run : | # Guardar informaci\u00f3n para rollback echo \"${{ github.sha }}\" > .previous-version echo \"PREVIOUS_SHA=$(git rev-parse HEAD~1)\" >> $GITHUB_ENV # Revertir cambios si el deployment falla git revert --no-edit HEAD git push Configuraci\u00f3n Avanzada \u00b6 Pipeline Paralelo \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 jobs : # Jobs que pueden ejecutarse en paralelo security-scan : runs-on : ubuntu-latest # ... configuraci\u00f3n unit-tests : runs-on : ubuntu-latest # ... configuraci\u00f3n integration-tests : runs-on : ubuntu-latest needs : [ unit-tests ] # ... configuraci\u00f3n # Job que depende de m\u00faltiples jobs deploy : runs-on : ubuntu-latest needs : [ security-scan , unit-tests , integration-tests ] # ... configuraci\u00f3n Conditional Deployments \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 - name : Deploy to Development if : github.ref == 'refs/heads/develop' run : | # Deploy logic for dev environment - name : Deploy to Staging if : github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[staging]') run : | # Deploy logic for staging environment - name : Deploy to Production if : startsWith(github.ref, 'refs/tags/') run : | # Deploy logic for production environment Environment-specific Configuration \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 strategy : matrix : environment : [ dev , staging , prod ] include : - environment : dev namespace : gitops-dev replicas : 1 resources_requests_cpu : 100m resources_requests_memory : 128Mi - environment : staging namespace : gitops-staging replicas : 2 resources_requests_cpu : 200m resources_requests_memory : 256Mi - environment : prod namespace : gitops-prod replicas : 3 resources_requests_cpu : 500m resources_requests_memory : 512Mi Monitoreo del Pipeline \u00b6 Pipeline Metrics \u00b6 1 2 3 4 5 6 7 8 9 - name : Record Pipeline Metrics uses : ./.github/actions/record-metrics with : metric-name : pipeline_duration value : ${{ env.PIPELINE_START_TIME }} labels : | branch=${{ github.ref_name }} environment=${{ matrix.environment }} success=${{ job.status == 'success' }} Alerting Configuration \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Pipeline Failure Alert if : failure() uses : rtCamp/action-slack-notify@v2 env : SLACK_WEBHOOK : ${{ secrets.SLACK_WEBHOOK }} SLACK_COLOR : danger SLACK_MESSAGE : | \ud83d\udea8 Pipeline FAILED! Repository: ${{ github.repository }} Branch: ${{ github.ref_name }} Commit: ${{ github.sha }} Job: ${{ github.job }} Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} Mejores Pr\u00e1cticas Implementadas \u00b6 1. Fail Fast Strategy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Fallar r\u00e1pido en validaciones b\u00e1sicas jobs : quick-checks : runs-on : ubuntu-latest steps : - name : Lint Dockerfile run : hadolint Docker/Dockerfile - name : Validate Kubernetes manifests run : | kubectl --dry-run=client apply -f Kubernetes/ - name : Check commit message format run : | if ! echo \"${{ github.event.head_commit.message }}\" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(\\(.+\\))?: .+'; then echo \"Commit message doesn't follow conventional commits format\" exit 1 fi 2. Caching Strategy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Cache Docker layers uses : actions/cache@v3 with : path : /tmp/.buildx-cache key : ${{ runner.os }}-buildx-${{ github.sha }} restore-keys : | ${{ runner.os }}-buildx- - name : Cache npm dependencies uses : actions/cache@v3 with : path : ~/.npm key : ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} restore-keys : | ${{ runner.os }}-node- 3. Security Best Practices \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Usar GITHUB_TOKEN en lugar de PAT cuando sea posible - name : Checkout with minimal permissions uses : actions/checkout@v4 with : token : ${{ secrets.GITHUB_TOKEN }} persist-credentials : false # Pinned versions para acciones - uses : actions/checkout@v4.1.1 - uses : docker/build-push-action@v5.1.0 - uses : docker/setup-buildx-action@v3.0.0 4. Resource Optimization \u00b6 1 2 3 4 5 6 7 8 # Limitar recursos del runner jobs : build : runs-on : ubuntu-latest timeout-minutes : 30 env : DOCKER_BUILDKIT : 1 BUILDX_NO_DEFAULT_ATTESTATIONS : 1 Troubleshooting del Pipeline \u00b6 Debugging Steps \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - name : Debug Information if : failure() run : | echo \"=== Environment Information ===\" env | sort echo \"=== Docker Information ===\" docker version docker system df echo \"=== Git Information ===\" git log --oneline -5 git status echo \"=== File System ===\" ls -la du -sh * 2>/dev/null | head -10 Common Issues and Solutions \u00b6 Build Failures \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Problema: Out of disk space # Soluci\u00f3n: Limpiar cach\u00e9 Docker - name: Clean Docker run: | docker system prune -a -f docker volume prune -f # Problema: Network timeout # Soluci\u00f3n: Retry logic - name: Build with retry uses: nick-invision/retry@v2 with: timeout_minutes: 10 max_attempts: 3 command: docker build -t myapp . Test Failures \u00b6 1 2 3 4 5 6 7 8 9 # Problema: Tests flaky # Soluci\u00f3n: Rerun failed tests - name: Run tests with retry run: | for i in { 1 ..3 } ; do npm test && break echo \"Test attempt $i failed, retrying...\" sleep 5 done Pipeline Performance Optimization \u00b6 Parallel Execution \u00b6 1 2 3 4 5 6 7 8 9 10 11 jobs : build-matrix : strategy : matrix : component : [ frontend , backend , database ] max-parallel : 3 runs-on : ubuntu-latest steps : - name : Build ${{ matrix.component }} run : | docker build -t ${{ matrix.component }} -f Docker/Dockerfile.${{ matrix.component }} . Conditional Execution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Skip if no changes uses : dorny/paths-filter@v2 id : changes with : filters : | docker: - 'Docker/**' k8s: - 'Kubernetes/**' code: - 'src/**' - name : Build only if code changed if : steps.changes.outputs.code == 'true' run : docker build -t myapp . M\u00e9tricas y Observabilidad \u00b6 DORA Metrics \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Deployment Frequency - name : Record Deployment run : | echo \"deployment_timestamp=$(date +%s)\" >> deployment_metrics.txt echo \"deployment_frequency=1\" >> deployment_metrics.txt # Lead Time - name : Calculate Lead Time run : | COMMIT_TIME=$(git show -s --format=%ct ${{ github.sha }}) DEPLOY_TIME=$(date +%s) LEAD_TIME=$((DEPLOY_TIME - COMMIT_TIME)) echo \"lead_time_seconds=$LEAD_TIME\" >> deployment_metrics.txt # Change Failure Rate - name : Record Success/Failure if : always() run : | if [[ \"${{ job.status }}\" == \"success\" ]]; then echo \"deployment_success=1\" >> deployment_metrics.txt else echo \"deployment_failure=1\" >> deployment_metrics.txt fi","title":"Pipeline"},{"location":"pipeline/#pipeline-gitops-completo","text":"","title":"Pipeline GitOps Completo"},{"location":"pipeline/#vision-general-del-pipeline","text":"El pipeline GitOps implementa un flujo automatizado desde el desarrollo hasta la producci\u00f3n, siguiendo las mejores pr\u00e1cticas de DevOps y GitOps. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 flowchart TD A[Developer Commit] --> B[GitHub Webhook] B --> C[GitHub Actions] C --> D[Security Scan] D --> E[Unit Tests] E --> F[Integration Tests] F --> G[Build Docker Image] G --> H[Push to Registry] H --> I[Update Manifests] I --> J[Git Commit] J --> K[ArgoCD Detects Change] K --> L[ArgoCD Sync] L --> M[Deploy to Kubernetes] M --> N[Health Checks] N --> O[Monitoring] O --> P[Notifications]","title":"Visi\u00f3n General del Pipeline"},{"location":"pipeline/#fases-del-pipeline","text":"","title":"Fases del Pipeline"},{"location":"pipeline/#1-fase-de-validacion","text":"","title":"1. Fase de Validaci\u00f3n"},{"location":"pipeline/#security-scanning","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 - name : Trivy Filesystem Scan uses : aquasecurity/trivy-action@master with : scan-type : 'fs' scan-ref : '.' format : 'sarif' severity : 'CRITICAL,HIGH,MEDIUM' - name : Hadolint Dockerfile Scan uses : hadolint/hadolint-action@v3.1.0 with : dockerfile : Docker/Dockerfile failure-threshold : error","title":"Security Scanning"},{"location":"pipeline/#code-quality","text":"1 2 3 4 5 6 7 8 9 10 - name : SonarCloud Scan uses : SonarSource/sonarcloud-github-action@master env : GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} SONAR_TOKEN : ${{ secrets.SONAR_TOKEN }} - name : CodeQL Analysis uses : github/codeql-action/analyze@v3 with : languages : javascript","title":"Code Quality"},{"location":"pipeline/#2-fase-de-testing","text":"","title":"2. Fase de Testing"},{"location":"pipeline/#testing-strategy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 test-matrix : strategy : matrix : node-version : [ 16 , 18 , 20 ] os : [ ubuntu-latest , windows-latest ] steps : - name : Unit Tests run : | npm test -- --coverage npm run test:unit - name : Integration Tests run : | docker-compose -f docker-compose.test.yml up -d npm run test:integration docker-compose -f docker-compose.test.yml down - name : E2E Tests run : | npm run test:e2e","title":"Testing Strategy"},{"location":"pipeline/#performance-tests","text":"1 2 3 4 5 6 - name : Lighthouse Performance uses : treosh/lighthouse-ci-action@v10 with : configPath : '.github/lighthouse/lighthouserc.json' uploadArtifacts : true temporaryPublicStorage : true","title":"Performance Tests"},{"location":"pipeline/#3-fase-de-build","text":"","title":"3. Fase de Build"},{"location":"pipeline/#multi-platform-build","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - name : Set up Docker Buildx uses : docker/setup-buildx-action@v3 with : platforms : linux/amd64,linux/arm64 - name : Build Multi-arch Image uses : docker/build-push-action@v5 with : context : . file : Docker/Dockerfile platforms : linux/amd64,linux/arm64 push : true tags : | ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest cache-from : type=gha cache-to : type=gha,mode=max","title":"Multi-platform Build"},{"location":"pipeline/#image-optimization","text":"1 2 3 4 5 6 7 8 - name : Optimize Image run : | # Usar dive para analizar layers docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\ wagoodman/dive:latest \\ ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \\ --ci \\ --lowestEfficiency=0.95","title":"Image Optimization"},{"location":"pipeline/#4-fase-de-deployment","text":"","title":"4. Fase de Deployment"},{"location":"pipeline/#gitops-update","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 - name : Update Kubernetes Manifests run : | # Clonar el repositorio de configuraci\u00f3n git clone https://github.com/Portfolio-jaime/gitops-config.git cd gitops-config # Actualizar imagen en m\u00faltiples entornos environments=(\"dev\" \"staging\" \"prod\") for env in \"${environments[@]}\"; do if [[ \"${{ github.ref }}\" == \"refs/heads/main\" ]] || [[ \"$env\" == \"dev\" ]]; then yq eval \".spec.template.spec.containers[0].image = \\\"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\\\"\" \\ -i environments/$env/deployment.yaml fi done # Commit y push git add . git commit -m \"Update ${{ github.repository }} to ${{ github.sha }}\" git push","title":"GitOps Update"},{"location":"pipeline/#rollback-strategy","text":"1 2 3 4 5 6 7 8 9 10 - name : Prepare Rollback if : failure() run : | # Guardar informaci\u00f3n para rollback echo \"${{ github.sha }}\" > .previous-version echo \"PREVIOUS_SHA=$(git rev-parse HEAD~1)\" >> $GITHUB_ENV # Revertir cambios si el deployment falla git revert --no-edit HEAD git push","title":"Rollback Strategy"},{"location":"pipeline/#configuracion-avanzada","text":"","title":"Configuraci\u00f3n Avanzada"},{"location":"pipeline/#pipeline-paralelo","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 jobs : # Jobs que pueden ejecutarse en paralelo security-scan : runs-on : ubuntu-latest # ... configuraci\u00f3n unit-tests : runs-on : ubuntu-latest # ... configuraci\u00f3n integration-tests : runs-on : ubuntu-latest needs : [ unit-tests ] # ... configuraci\u00f3n # Job que depende de m\u00faltiples jobs deploy : runs-on : ubuntu-latest needs : [ security-scan , unit-tests , integration-tests ] # ... configuraci\u00f3n","title":"Pipeline Paralelo"},{"location":"pipeline/#conditional-deployments","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 - name : Deploy to Development if : github.ref == 'refs/heads/develop' run : | # Deploy logic for dev environment - name : Deploy to Staging if : github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[staging]') run : | # Deploy logic for staging environment - name : Deploy to Production if : startsWith(github.ref, 'refs/tags/') run : | # Deploy logic for production environment","title":"Conditional Deployments"},{"location":"pipeline/#environment-specific-configuration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 strategy : matrix : environment : [ dev , staging , prod ] include : - environment : dev namespace : gitops-dev replicas : 1 resources_requests_cpu : 100m resources_requests_memory : 128Mi - environment : staging namespace : gitops-staging replicas : 2 resources_requests_cpu : 200m resources_requests_memory : 256Mi - environment : prod namespace : gitops-prod replicas : 3 resources_requests_cpu : 500m resources_requests_memory : 512Mi","title":"Environment-specific Configuration"},{"location":"pipeline/#monitoreo-del-pipeline","text":"","title":"Monitoreo del Pipeline"},{"location":"pipeline/#pipeline-metrics","text":"1 2 3 4 5 6 7 8 9 - name : Record Pipeline Metrics uses : ./.github/actions/record-metrics with : metric-name : pipeline_duration value : ${{ env.PIPELINE_START_TIME }} labels : | branch=${{ github.ref_name }} environment=${{ matrix.environment }} success=${{ job.status == 'success' }}","title":"Pipeline Metrics"},{"location":"pipeline/#alerting-configuration","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Pipeline Failure Alert if : failure() uses : rtCamp/action-slack-notify@v2 env : SLACK_WEBHOOK : ${{ secrets.SLACK_WEBHOOK }} SLACK_COLOR : danger SLACK_MESSAGE : | \ud83d\udea8 Pipeline FAILED! Repository: ${{ github.repository }} Branch: ${{ github.ref_name }} Commit: ${{ github.sha }} Job: ${{ github.job }} Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}","title":"Alerting Configuration"},{"location":"pipeline/#mejores-practicas-implementadas","text":"","title":"Mejores Pr\u00e1cticas Implementadas"},{"location":"pipeline/#1-fail-fast-strategy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Fallar r\u00e1pido en validaciones b\u00e1sicas jobs : quick-checks : runs-on : ubuntu-latest steps : - name : Lint Dockerfile run : hadolint Docker/Dockerfile - name : Validate Kubernetes manifests run : | kubectl --dry-run=client apply -f Kubernetes/ - name : Check commit message format run : | if ! echo \"${{ github.event.head_commit.message }}\" | grep -qE '^(feat|fix|docs|style|refactor|test|chore)(\\(.+\\))?: .+'; then echo \"Commit message doesn't follow conventional commits format\" exit 1 fi","title":"1. Fail Fast Strategy"},{"location":"pipeline/#2-caching-strategy","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Cache Docker layers uses : actions/cache@v3 with : path : /tmp/.buildx-cache key : ${{ runner.os }}-buildx-${{ github.sha }} restore-keys : | ${{ runner.os }}-buildx- - name : Cache npm dependencies uses : actions/cache@v3 with : path : ~/.npm key : ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} restore-keys : | ${{ runner.os }}-node-","title":"2. Caching Strategy"},{"location":"pipeline/#3-security-best-practices","text":"1 2 3 4 5 6 7 8 9 10 11 # Usar GITHUB_TOKEN en lugar de PAT cuando sea posible - name : Checkout with minimal permissions uses : actions/checkout@v4 with : token : ${{ secrets.GITHUB_TOKEN }} persist-credentials : false # Pinned versions para acciones - uses : actions/checkout@v4.1.1 - uses : docker/build-push-action@v5.1.0 - uses : docker/setup-buildx-action@v3.0.0","title":"3. Security Best Practices"},{"location":"pipeline/#4-resource-optimization","text":"1 2 3 4 5 6 7 8 # Limitar recursos del runner jobs : build : runs-on : ubuntu-latest timeout-minutes : 30 env : DOCKER_BUILDKIT : 1 BUILDX_NO_DEFAULT_ATTESTATIONS : 1","title":"4. Resource Optimization"},{"location":"pipeline/#troubleshooting-del-pipeline","text":"","title":"Troubleshooting del Pipeline"},{"location":"pipeline/#debugging-steps","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - name : Debug Information if : failure() run : | echo \"=== Environment Information ===\" env | sort echo \"=== Docker Information ===\" docker version docker system df echo \"=== Git Information ===\" git log --oneline -5 git status echo \"=== File System ===\" ls -la du -sh * 2>/dev/null | head -10","title":"Debugging Steps"},{"location":"pipeline/#common-issues-and-solutions","text":"","title":"Common Issues and Solutions"},{"location":"pipeline/#build-failures","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Problema: Out of disk space # Soluci\u00f3n: Limpiar cach\u00e9 Docker - name: Clean Docker run: | docker system prune -a -f docker volume prune -f # Problema: Network timeout # Soluci\u00f3n: Retry logic - name: Build with retry uses: nick-invision/retry@v2 with: timeout_minutes: 10 max_attempts: 3 command: docker build -t myapp .","title":"Build Failures"},{"location":"pipeline/#test-failures","text":"1 2 3 4 5 6 7 8 9 # Problema: Tests flaky # Soluci\u00f3n: Rerun failed tests - name: Run tests with retry run: | for i in { 1 ..3 } ; do npm test && break echo \"Test attempt $i failed, retrying...\" sleep 5 done","title":"Test Failures"},{"location":"pipeline/#pipeline-performance-optimization","text":"","title":"Pipeline Performance Optimization"},{"location":"pipeline/#parallel-execution","text":"1 2 3 4 5 6 7 8 9 10 11 jobs : build-matrix : strategy : matrix : component : [ frontend , backend , database ] max-parallel : 3 runs-on : ubuntu-latest steps : - name : Build ${{ matrix.component }} run : | docker build -t ${{ matrix.component }} -f Docker/Dockerfile.${{ matrix.component }} .","title":"Parallel Execution"},{"location":"pipeline/#conditional-execution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - name : Skip if no changes uses : dorny/paths-filter@v2 id : changes with : filters : | docker: - 'Docker/**' k8s: - 'Kubernetes/**' code: - 'src/**' - name : Build only if code changed if : steps.changes.outputs.code == 'true' run : docker build -t myapp .","title":"Conditional Execution"},{"location":"pipeline/#metricas-y-observabilidad","text":"","title":"M\u00e9tricas y Observabilidad"},{"location":"pipeline/#dora-metrics","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Deployment Frequency - name : Record Deployment run : | echo \"deployment_timestamp=$(date +%s)\" >> deployment_metrics.txt echo \"deployment_frequency=1\" >> deployment_metrics.txt # Lead Time - name : Calculate Lead Time run : | COMMIT_TIME=$(git show -s --format=%ct ${{ github.sha }}) DEPLOY_TIME=$(date +%s) LEAD_TIME=$((DEPLOY_TIME - COMMIT_TIME)) echo \"lead_time_seconds=$LEAD_TIME\" >> deployment_metrics.txt # Change Failure Rate - name : Record Success/Failure if : always() run : | if [[ \"${{ job.status }}\" == \"success\" ]]; then echo \"deployment_success=1\" >> deployment_metrics.txt else echo \"deployment_failure=1\" >> deployment_metrics.txt fi","title":"DORA Metrics"},{"location":"prerequisites/","text":"Prerequisites \u00b6 Requirements and setup needed before running the GitOps demo project. \ud83d\udda5\ufe0f System Requirements \u00b6 Hardware Requirements \u00b6 CPU : 2+ cores (4+ recommended) RAM : 4GB minimum (8GB recommended) Storage : 10GB available space Network : Internet connection for downloading images Operating System Support \u00b6 Linux : Ubuntu 18.04+, CentOS 7+, Debian 9+ macOS : 10.14 Mojave or later Windows : Windows 10 with WSL2 \ud83d\udee0\ufe0f Required Tools \u00b6 Essential Tools \u00b6 Tool Version Purpose Installation Docker 20.0+ Container runtime Docker Install kubectl 1.25+ Kubernetes CLI kubectl Install Git 2.20+ Version control Git Install Kubernetes Cluster \u00b6 Choose one of the following options: Option 1: Minikube (Recommended for Demo) \u00b6 1 2 3 4 5 6 7 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster minikube start --memory = 4096 --cpus = 2 minikube status Option 2: Docker Desktop \u00b6 1 2 3 # Enable Kubernetes in Docker Desktop # Settings \u2192 Kubernetes \u2192 Enable Kubernetes kubectl cluster-info Option 3: Cloud Kubernetes \u00b6 EKS (AWS): EKS Getting Started GKE (Google): GKE Quickstart AKS (Azure): AKS Quickstart CI/CD Tools \u00b6 GitHub Actions (Included) \u00b6 GitHub account with repository access GitHub Actions enabled (default for public repos) ArgoCD \u00b6 1 2 3 4 5 6 7 # Install ArgoCD using kubectl kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Or using Helm (recommended) helm repo add argo https://argoproj.github.io/argo-helm helm install argocd argo/argo-cd -n argocd --create-namespace \ud83d\udd27 Installation Instructions \u00b6 1. Install Docker \u00b6 Ubuntu/Debian \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Update package index sudo apt update # Install dependencies sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release # Add Docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # Add Docker repository echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null # Install Docker sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Verify installation docker --version docker run hello-world macOS \u00b6 1 2 3 4 5 # Using Homebrew brew install --cask docker # Or download from Docker website # https://docs.docker.com/desktop/mac/install/ Windows (WSL2) \u00b6 1 2 3 4 5 # Install Docker Desktop for Windows # Enable WSL2 backend in Docker Desktop settings # Install Docker in WSL2: curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh 2. Install kubectl \u00b6 Using curl \u00b6 1 2 3 4 5 6 7 8 9 # Linux curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/linux/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/ # macOS curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/darwin/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/ Using Package Managers \u00b6 1 2 3 4 5 6 7 8 9 10 # macOS with Homebrew brew install kubectl # Ubuntu/Debian sudo apt update sudo apt install -y apt-transport-https ca-certificates curl sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt update sudo apt install -y kubectl Verify Installation \u00b6 1 2 kubectl version --client kubectl cluster-info 3. Install Git \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Ubuntu/Debian sudo apt install -y git # CentOS/RHEL sudo yum install -y git # macOS brew install git # Verify git --version \ud83d\ude80 Kubernetes Cluster Setup \u00b6 Minikube Setup (Recommended) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster with adequate resources minikube start \\ --memory = 4096 \\ --cpus = 2 \\ --disk-size = 20gb \\ --driver = docker # Enable useful addons minikube addons enable ingress minikube addons enable dashboard minikube addons enable metrics-server # Verify cluster kubectl get nodes kubectl get pods -A Alternative: Kind (Kubernetes in Docker) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Install Kind curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64 chmod +x ./kind sudo mv ./kind /usr/local/bin/kind # Create cluster cat <<EOF | kind create cluster --config=- kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: \"ingress-ready=true\" extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP EOF # Verify kubectl cluster-info --context kind-kind \ud83c\udfaf ArgoCD Installation \u00b6 Method 1: Official Manifests \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Create namespace kubectl create namespace argocd # Install ArgoCD kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Wait for pods to be ready kubectl wait --for = condition = available --timeout = 300s deployment/argocd-server -n argocd # Get initial admin password kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ; echo Method 2: Helm (Recommended) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Add Helm repository helm repo add argo https://argoproj.github.io/argo-helm helm repo update # Install ArgoCD with custom values cat > argocd-values.yaml <<EOF server: service: type: LoadBalancer config: repositories: | - url: https://github.com/Portfolio-jaime/GitOps.git type: git EOF # Install helm install argocd argo/argo-cd \\ -n argocd \\ --create-namespace \\ -f argocd-values.yaml \\ --wait # Get admin password kubectl -n argocd get secret argocd-initial-admin-secret \\ -o jsonpath = \"{.data.password}\" | base64 -d ; echo Access ArgoCD UI \u00b6 1 2 3 4 5 6 7 8 9 # Port forward to access UI kubectl port-forward svc/argocd-server -n argocd 8080 :443 & # Or with Minikube minikube service argocd-server -n argocd # Access at: https://localhost:8080 # Username: admin # Password: (from previous step) \ud83d\udd10 Container Registry Setup \u00b6 Docker Hub (Free Option) \u00b6 1 2 3 4 5 6 7 # Create account at https://hub.docker.com # Login from command line docker login # Test push (optional) docker tag hello-world yourusername/hello-world docker push yourusername/hello-world GitHub Container Registry (Recommended) \u00b6 1 2 3 4 5 6 7 8 # Create Personal Access Token with packages:write scope # https://github.com/settings/tokens # Login to GitHub Container Registry echo $GITHUB_TOKEN | docker login ghcr.io -u yourusername --password-stdin # Test access docker pull ghcr.io/yourusername/test:latest Alternative: Local Registry \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Start local registry for testing docker run -d -p 5000 :5000 --restart = always --name registry registry:2 # Configure Docker daemon to use insecure registry # Add to /etc/docker/daemon.json: { \"insecure-registries\" : [ \"localhost:5000\" ] } # Restart Docker sudo systemctl restart docker \ud83d\udd11 GitHub Setup \u00b6 Repository Access \u00b6 Fork or Clone : Fork the GitOps repository or create your own Access Tokens : Create GitHub Personal Access Token Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens Generate token with repo and workflow scopes GitHub Actions Secrets \u00b6 Configure the following secrets in your repository: - DOCKER_USERNAME : Docker Hub username - DOCKER_PASSWORD : Docker Hub password or token - KUBE_CONFIG : Base64 encoded kubeconfig (for external clusters) 1 2 # Encode kubeconfig for GitHub secrets cat ~/.kube/config | base64 -w 0 \ud83e\uddea Verification \u00b6 Pre-flight Checklist \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 1. Docker is running docker --version docker ps # 2. Kubernetes cluster is accessible kubectl cluster-info kubectl get nodes # 3. ArgoCD is installed and running kubectl get pods -n argocd kubectl get svc -n argocd # 4. Git is configured git --version git config --list # 5. Container registry access docker login Test GitOps Workflow \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. Clone the repository git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps # 2. Build and test Docker image docker build -t test-gitops Docker/ docker run -p 8080 :80 test-gitops & curl http://localhost:8080 docker stop $( docker ps -q --filter ancestor = test-gitops ) # 3. Test Kubernetes deployment kubectl apply -f Kubernetes/ kubectl get pods kubectl get svc # 4. Cleanup test deployment kubectl delete -f Kubernetes/ \u26a0\ufe0f Common Issues \u00b6 Docker Permission Issues \u00b6 1 2 3 4 5 6 # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Or run with sudo (not recommended) sudo docker ps Kubernetes Connection Issues \u00b6 1 2 3 4 5 6 7 8 9 10 # Check kubeconfig kubectl config view kubectl config current-context # For Minikube minikube status minikube start # Verify cluster access kubectl auth can-i get pods ArgoCD Access Issues \u00b6 1 2 3 4 5 6 7 8 # Check ArgoCD pods kubectl get pods -n argocd # Reset admin password kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": {\"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\",\"admin.passwordMtime\": \"' $( date +%FT%T%Z ) '\"}}' # New password is: password \ud83d\udcda Additional Resources \u00b6 Documentation \u00b6 Docker Documentation Kubernetes Documentation ArgoCD Documentation GitHub Actions Documentation Tutorials \u00b6 Kubernetes Basics ArgoCD Getting Started GitHub Actions Quickstart Tools \u00b6 Minikube Kind Docker Desktop Helm \u2705 Once you've completed these prerequisites, you're ready to proceed with the Setup Guide !","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"Requirements and setup needed before running the GitOps demo project.","title":"Prerequisites"},{"location":"prerequisites/#system-requirements","text":"","title":"\ud83d\udda5\ufe0f System Requirements"},{"location":"prerequisites/#hardware-requirements","text":"CPU : 2+ cores (4+ recommended) RAM : 4GB minimum (8GB recommended) Storage : 10GB available space Network : Internet connection for downloading images","title":"Hardware Requirements"},{"location":"prerequisites/#operating-system-support","text":"Linux : Ubuntu 18.04+, CentOS 7+, Debian 9+ macOS : 10.14 Mojave or later Windows : Windows 10 with WSL2","title":"Operating System Support"},{"location":"prerequisites/#required-tools","text":"","title":"\ud83d\udee0\ufe0f Required Tools"},{"location":"prerequisites/#essential-tools","text":"Tool Version Purpose Installation Docker 20.0+ Container runtime Docker Install kubectl 1.25+ Kubernetes CLI kubectl Install Git 2.20+ Version control Git Install","title":"Essential Tools"},{"location":"prerequisites/#kubernetes-cluster","text":"Choose one of the following options:","title":"Kubernetes Cluster"},{"location":"prerequisites/#option-1-minikube-recommended-for-demo","text":"1 2 3 4 5 6 7 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster minikube start --memory = 4096 --cpus = 2 minikube status","title":"Option 1: Minikube (Recommended for Demo)"},{"location":"prerequisites/#option-2-docker-desktop","text":"1 2 3 # Enable Kubernetes in Docker Desktop # Settings \u2192 Kubernetes \u2192 Enable Kubernetes kubectl cluster-info","title":"Option 2: Docker Desktop"},{"location":"prerequisites/#option-3-cloud-kubernetes","text":"EKS (AWS): EKS Getting Started GKE (Google): GKE Quickstart AKS (Azure): AKS Quickstart","title":"Option 3: Cloud Kubernetes"},{"location":"prerequisites/#cicd-tools","text":"","title":"CI/CD Tools"},{"location":"prerequisites/#github-actions-included","text":"GitHub account with repository access GitHub Actions enabled (default for public repos)","title":"GitHub Actions (Included)"},{"location":"prerequisites/#argocd","text":"1 2 3 4 5 6 7 # Install ArgoCD using kubectl kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Or using Helm (recommended) helm repo add argo https://argoproj.github.io/argo-helm helm install argocd argo/argo-cd -n argocd --create-namespace","title":"ArgoCD"},{"location":"prerequisites/#installation-instructions","text":"","title":"\ud83d\udd27 Installation Instructions"},{"location":"prerequisites/#1-install-docker","text":"","title":"1. Install Docker"},{"location":"prerequisites/#ubuntudebian","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Update package index sudo apt update # Install dependencies sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release # Add Docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # Add Docker repository echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null # Install Docker sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Verify installation docker --version docker run hello-world","title":"Ubuntu/Debian"},{"location":"prerequisites/#macos","text":"1 2 3 4 5 # Using Homebrew brew install --cask docker # Or download from Docker website # https://docs.docker.com/desktop/mac/install/","title":"macOS"},{"location":"prerequisites/#windows-wsl2","text":"1 2 3 4 5 # Install Docker Desktop for Windows # Enable WSL2 backend in Docker Desktop settings # Install Docker in WSL2: curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh","title":"Windows (WSL2)"},{"location":"prerequisites/#2-install-kubectl","text":"","title":"2. Install kubectl"},{"location":"prerequisites/#using-curl","text":"1 2 3 4 5 6 7 8 9 # Linux curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/linux/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/ # macOS curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/darwin/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/","title":"Using curl"},{"location":"prerequisites/#using-package-managers","text":"1 2 3 4 5 6 7 8 9 10 # macOS with Homebrew brew install kubectl # Ubuntu/Debian sudo apt update sudo apt install -y apt-transport-https ca-certificates curl sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt update sudo apt install -y kubectl","title":"Using Package Managers"},{"location":"prerequisites/#verify-installation","text":"1 2 kubectl version --client kubectl cluster-info","title":"Verify Installation"},{"location":"prerequisites/#3-install-git","text":"1 2 3 4 5 6 7 8 9 10 11 # Ubuntu/Debian sudo apt install -y git # CentOS/RHEL sudo yum install -y git # macOS brew install git # Verify git --version","title":"3. Install Git"},{"location":"prerequisites/#kubernetes-cluster-setup","text":"","title":"\ud83d\ude80 Kubernetes Cluster Setup"},{"location":"prerequisites/#minikube-setup-recommended","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster with adequate resources minikube start \\ --memory = 4096 \\ --cpus = 2 \\ --disk-size = 20gb \\ --driver = docker # Enable useful addons minikube addons enable ingress minikube addons enable dashboard minikube addons enable metrics-server # Verify cluster kubectl get nodes kubectl get pods -A","title":"Minikube Setup (Recommended)"},{"location":"prerequisites/#alternative-kind-kubernetes-in-docker","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Install Kind curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64 chmod +x ./kind sudo mv ./kind /usr/local/bin/kind # Create cluster cat <<EOF | kind create cluster --config=- kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: \"ingress-ready=true\" extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP EOF # Verify kubectl cluster-info --context kind-kind","title":"Alternative: Kind (Kubernetes in Docker)"},{"location":"prerequisites/#argocd-installation","text":"","title":"\ud83c\udfaf ArgoCD Installation"},{"location":"prerequisites/#method-1-official-manifests","text":"1 2 3 4 5 6 7 8 9 10 11 # Create namespace kubectl create namespace argocd # Install ArgoCD kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Wait for pods to be ready kubectl wait --for = condition = available --timeout = 300s deployment/argocd-server -n argocd # Get initial admin password kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ; echo","title":"Method 1: Official Manifests"},{"location":"prerequisites/#method-2-helm-recommended","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Add Helm repository helm repo add argo https://argoproj.github.io/argo-helm helm repo update # Install ArgoCD with custom values cat > argocd-values.yaml <<EOF server: service: type: LoadBalancer config: repositories: | - url: https://github.com/Portfolio-jaime/GitOps.git type: git EOF # Install helm install argocd argo/argo-cd \\ -n argocd \\ --create-namespace \\ -f argocd-values.yaml \\ --wait # Get admin password kubectl -n argocd get secret argocd-initial-admin-secret \\ -o jsonpath = \"{.data.password}\" | base64 -d ; echo","title":"Method 2: Helm (Recommended)"},{"location":"prerequisites/#access-argocd-ui","text":"1 2 3 4 5 6 7 8 9 # Port forward to access UI kubectl port-forward svc/argocd-server -n argocd 8080 :443 & # Or with Minikube minikube service argocd-server -n argocd # Access at: https://localhost:8080 # Username: admin # Password: (from previous step)","title":"Access ArgoCD UI"},{"location":"prerequisites/#container-registry-setup","text":"","title":"\ud83d\udd10 Container Registry Setup"},{"location":"prerequisites/#docker-hub-free-option","text":"1 2 3 4 5 6 7 # Create account at https://hub.docker.com # Login from command line docker login # Test push (optional) docker tag hello-world yourusername/hello-world docker push yourusername/hello-world","title":"Docker Hub (Free Option)"},{"location":"prerequisites/#github-container-registry-recommended","text":"1 2 3 4 5 6 7 8 # Create Personal Access Token with packages:write scope # https://github.com/settings/tokens # Login to GitHub Container Registry echo $GITHUB_TOKEN | docker login ghcr.io -u yourusername --password-stdin # Test access docker pull ghcr.io/yourusername/test:latest","title":"GitHub Container Registry (Recommended)"},{"location":"prerequisites/#alternative-local-registry","text":"1 2 3 4 5 6 7 8 9 10 11 # Start local registry for testing docker run -d -p 5000 :5000 --restart = always --name registry registry:2 # Configure Docker daemon to use insecure registry # Add to /etc/docker/daemon.json: { \"insecure-registries\" : [ \"localhost:5000\" ] } # Restart Docker sudo systemctl restart docker","title":"Alternative: Local Registry"},{"location":"prerequisites/#github-setup","text":"","title":"\ud83d\udd11 GitHub Setup"},{"location":"prerequisites/#repository-access","text":"Fork or Clone : Fork the GitOps repository or create your own Access Tokens : Create GitHub Personal Access Token Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens Generate token with repo and workflow scopes","title":"Repository Access"},{"location":"prerequisites/#github-actions-secrets","text":"Configure the following secrets in your repository: - DOCKER_USERNAME : Docker Hub username - DOCKER_PASSWORD : Docker Hub password or token - KUBE_CONFIG : Base64 encoded kubeconfig (for external clusters) 1 2 # Encode kubeconfig for GitHub secrets cat ~/.kube/config | base64 -w 0","title":"GitHub Actions Secrets"},{"location":"prerequisites/#verification","text":"","title":"\ud83e\uddea Verification"},{"location":"prerequisites/#pre-flight-checklist","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 1. Docker is running docker --version docker ps # 2. Kubernetes cluster is accessible kubectl cluster-info kubectl get nodes # 3. ArgoCD is installed and running kubectl get pods -n argocd kubectl get svc -n argocd # 4. Git is configured git --version git config --list # 5. Container registry access docker login","title":"Pre-flight Checklist"},{"location":"prerequisites/#test-gitops-workflow","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. Clone the repository git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps # 2. Build and test Docker image docker build -t test-gitops Docker/ docker run -p 8080 :80 test-gitops & curl http://localhost:8080 docker stop $( docker ps -q --filter ancestor = test-gitops ) # 3. Test Kubernetes deployment kubectl apply -f Kubernetes/ kubectl get pods kubectl get svc # 4. Cleanup test deployment kubectl delete -f Kubernetes/","title":"Test GitOps Workflow"},{"location":"prerequisites/#common-issues","text":"","title":"\u26a0\ufe0f Common Issues"},{"location":"prerequisites/#docker-permission-issues","text":"1 2 3 4 5 6 # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Or run with sudo (not recommended) sudo docker ps","title":"Docker Permission Issues"},{"location":"prerequisites/#kubernetes-connection-issues","text":"1 2 3 4 5 6 7 8 9 10 # Check kubeconfig kubectl config view kubectl config current-context # For Minikube minikube status minikube start # Verify cluster access kubectl auth can-i get pods","title":"Kubernetes Connection Issues"},{"location":"prerequisites/#argocd-access-issues","text":"1 2 3 4 5 6 7 8 # Check ArgoCD pods kubectl get pods -n argocd # Reset admin password kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": {\"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\",\"admin.passwordMtime\": \"' $( date +%FT%T%Z ) '\"}}' # New password is: password","title":"ArgoCD Access Issues"},{"location":"prerequisites/#additional-resources","text":"","title":"\ud83d\udcda Additional Resources"},{"location":"prerequisites/#documentation","text":"Docker Documentation Kubernetes Documentation ArgoCD Documentation GitHub Actions Documentation","title":"Documentation"},{"location":"prerequisites/#tutorials","text":"Kubernetes Basics ArgoCD Getting Started GitHub Actions Quickstart","title":"Tutorials"},{"location":"prerequisites/#tools","text":"Minikube Kind Docker Desktop Helm \u2705 Once you've completed these prerequisites, you're ready to proceed with the Setup Guide !","title":"Tools"},{"location":"setup/","text":"Setup Guide \u00b6 Configuraci\u00f3n Inicial del Proyecto GitOps \u00b6 Requisitos Previos \u00b6 Docker instalado Kubernetes cluster (local o remoto) kubectl configurado GitHub account ArgoCD instalado en el cluster 1. Configuraci\u00f3n de Variables de Entorno \u00b6 Crea un archivo .env en la ra\u00edz del proyecto: 1 2 3 4 5 6 7 8 9 10 11 12 # Docker Registry DOCKER_REGISTRY = ghcr.io DOCKER_USERNAME = tu-usuario-github DOCKER_PASSWORD = tu-token-github # Kubernetes KUBECONFIG_PATH = ~/.kube/config NAMESPACE = gitops-demo # ArgoCD ARGOCD_SERVER = localhost:8080 ARGOCD_USERNAME = admin 2. Configuraci\u00f3n de GitHub Actions \u00b6 Configura los siguientes secrets en tu repositorio de GitHub: 1 2 3 4 Secrets requeridos : - DOCKER_REGISTRY : ghcr.io - DOCKER_USERNAME : tu-usuario - DOCKER_TOKEN : token-con-permisos-write:packages 3. Configuraci\u00f3n del Cluster Kubernetes \u00b6 1 2 3 4 5 # Crear namespace kubectl create namespace gitops-demo # Aplicar manifiestos kubectl apply -f Kubernetes/ -n gitops-demo 4. Configuraci\u00f3n de ArgoCD \u00b6 1 2 3 4 5 6 7 8 9 # Instalar ArgoCD kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Obtener password inicial kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d # Port forward para acceso local kubectl port-forward svc/argocd-server -n argocd 8080 :443 5. Crear Aplicaci\u00f3n en ArgoCD \u00b6 1 2 3 4 5 6 argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace gitops-demo \\ --sync-policy automated Verificaci\u00f3n \u00b6 1 2 3 4 5 6 7 8 # Verificar estado de la aplicaci\u00f3n argocd app get gitops-demo # Verificar pods kubectl get pods -n gitops-demo # Verificar servicios kubectl get svc -n gitops-demo","title":"Setup"},{"location":"setup/#setup-guide","text":"","title":"Setup Guide"},{"location":"setup/#configuracion-inicial-del-proyecto-gitops","text":"","title":"Configuraci\u00f3n Inicial del Proyecto GitOps"},{"location":"setup/#requisitos-previos","text":"Docker instalado Kubernetes cluster (local o remoto) kubectl configurado GitHub account ArgoCD instalado en el cluster","title":"Requisitos Previos"},{"location":"setup/#1-configuracion-de-variables-de-entorno","text":"Crea un archivo .env en la ra\u00edz del proyecto: 1 2 3 4 5 6 7 8 9 10 11 12 # Docker Registry DOCKER_REGISTRY = ghcr.io DOCKER_USERNAME = tu-usuario-github DOCKER_PASSWORD = tu-token-github # Kubernetes KUBECONFIG_PATH = ~/.kube/config NAMESPACE = gitops-demo # ArgoCD ARGOCD_SERVER = localhost:8080 ARGOCD_USERNAME = admin","title":"1. Configuraci\u00f3n de Variables de Entorno"},{"location":"setup/#2-configuracion-de-github-actions","text":"Configura los siguientes secrets en tu repositorio de GitHub: 1 2 3 4 Secrets requeridos : - DOCKER_REGISTRY : ghcr.io - DOCKER_USERNAME : tu-usuario - DOCKER_TOKEN : token-con-permisos-write:packages","title":"2. Configuraci\u00f3n de GitHub Actions"},{"location":"setup/#3-configuracion-del-cluster-kubernetes","text":"1 2 3 4 5 # Crear namespace kubectl create namespace gitops-demo # Aplicar manifiestos kubectl apply -f Kubernetes/ -n gitops-demo","title":"3. Configuraci\u00f3n del Cluster Kubernetes"},{"location":"setup/#4-configuracion-de-argocd","text":"1 2 3 4 5 6 7 8 9 # Instalar ArgoCD kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Obtener password inicial kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d # Port forward para acceso local kubectl port-forward svc/argocd-server -n argocd 8080 :443","title":"4. Configuraci\u00f3n de ArgoCD"},{"location":"setup/#5-crear-aplicacion-en-argocd","text":"1 2 3 4 5 6 argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace gitops-demo \\ --sync-policy automated","title":"5. Crear Aplicaci\u00f3n en ArgoCD"},{"location":"setup/#verificacion","text":"1 2 3 4 5 6 7 8 # Verificar estado de la aplicaci\u00f3n argocd app get gitops-demo # Verificar pods kubectl get pods -n gitops-demo # Verificar servicios kubectl get svc -n gitops-demo","title":"Verificaci\u00f3n"},{"location":"troubleshooting/","text":"Troubleshooting Guide \u00b6 Problemas Comunes de Despliegue \u00b6 1. Imagen Docker no se actualiza \u00b6 S\u00edntomas \u00b6 Los pods siguen ejecutando la versi\u00f3n anterior de la aplicaci\u00f3n ArgoCD muestra estado \"Synced\" pero la aplicaci\u00f3n no cambi\u00f3 Diagn\u00f3stico \u00b6 1 2 3 4 5 6 7 8 # Verificar la imagen actual en el deployment kubectl describe deployment gitops-demo -n gitops-demo | grep Image # Verificar la imagen en los pods kubectl get pods -n gitops-demo -o jsonpath = '{.items[*].spec.containers[*].image}' # Verificar el tag de la imagen en el registry docker manifest inspect ghcr.io/portfolio-jaime/gitops:latest Soluciones \u00b6 1 2 3 4 5 6 7 8 9 # 1. Forzar recreaci\u00f3n de pods kubectl rollout restart deployment/gitops-demo -n gitops-demo # 2. Usar imagePullPolicy: Always kubectl patch deployment gitops-demo -n gitops-demo -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"webapp\",\"imagePullPolicy\":\"Always\"}]}}}}' # 3. Verificar que el tag de imagen sea \u00fanico # En el workflow de GitHub Actions, usar SHA en lugar de 'latest' sed -i \"s|image: .*|image: ghcr.io/portfolio-jaime/gitops: ${ GITHUB_SHA } |\" Kubernetes/deployment.yaml 2. ArgoCD no sincroniza autom\u00e1ticamente \u00b6 S\u00edntomas \u00b6 Los cambios en Git no se reflejan en el cluster ArgoCD muestra \"OutOfSync\" pero no sincroniza autom\u00e1ticamente Diagn\u00f3stico \u00b6 1 2 3 4 5 6 7 8 9 # Verificar el estado de la aplicaci\u00f3n argocd app get gitops-demo # Verificar los webhooks de GitHub curl -s -H \"Authorization: token $GITHUB_TOKEN \" \\ https://api.github.com/repos/Portfolio-jaime/GitOps/hooks # Verificar logs de ArgoCD kubectl logs -n argocd -l app.kubernetes.io/name = argocd-application-controller Soluciones \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 1. Verificar configuraci\u00f3n de sync policy kubectl patch application gitops-demo -n argocd --type = 'merge' -p = '{ \"spec\": { \"syncPolicy\": { \"automated\": { \"prune\": true, \"selfHeal\": true } } } }' # 2. Sincronizaci\u00f3n manual argocd app sync gitops-demo # 3. Refresh manual de la aplicaci\u00f3n argocd app get gitops-demo --refresh # 4. Verificar permisos del repositorio argocd repo get https://github.com/Portfolio-jaime/GitOps.git 3. Problemas de Red y Conectividad \u00b6 S\u00edntomas \u00b6 Pods no pueden conectarse entre s\u00ed Aplicaci\u00f3n no responde desde el exterior Timeouts en health checks Diagn\u00f3stico \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Verificar estado de los pods kubectl get pods -n gitops-demo -o wide # Verificar servicios y endpoints kubectl get svc,endpoints -n gitops-demo # Probar conectividad desde dentro del cluster kubectl exec -it deployment/gitops-demo -n gitops-demo -- wget -qO- http://localhost:8080/health # Verificar Network Policies kubectl get networkpolicy -n gitops-demo Soluciones \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 1. Verificar configuraci\u00f3n del Service kubectl describe service gitops-demo -n gitops-demo # 2. Verificar selectors del Service kubectl get pods -n gitops-demo --show-labels kubectl describe service gitops-demo -n gitops-demo | grep Selector # 3. Probar port-forward directo kubectl port-forward deployment/gitops-demo 8080 :8080 -n gitops-demo # 4. Verificar Ingress (si est\u00e1 configurado) kubectl describe ingress gitops-demo -n gitops-demo # 5. Verificar DNS interno kubectl exec -it deployment/gitops-demo -n gitops-demo -- nslookup gitops-demo.gitops-demo.svc.cluster.local 4. Problemas de Recursos \u00b6 S\u00edntomas \u00b6 Pods en estado \"Pending\" o \"CrashLoopBackOff\" Pods reinici\u00e1ndose frecuentemente Performance degradada de la aplicaci\u00f3n Diagn\u00f3stico \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 # Verificar recursos del cluster kubectl top nodes kubectl top pods -n gitops-demo # Verificar eventos del namespace kubectl get events -n gitops-demo --sort-by = .metadata.creationTimestamp # Verificar l\u00edmites de recursos kubectl describe deployment gitops-demo -n gitops-demo | grep -A 10 \"Limits\\|Requests\" # Verificar estado de los pods kubectl describe pods -n gitops-demo Soluciones \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # 1. Ajustar requests y limits de CPU/memoria kubectl patch deployment gitops-demo -n gitops-demo -p '{ \"spec\": { \"template\": { \"spec\": { \"containers\": [{ \"name\": \"webapp\", \"resources\": { \"requests\": { \"cpu\": \"100m\", \"memory\": \"128Mi\" }, \"limits\": { \"cpu\": \"500m\", \"memory\": \"256Mi\" } } }] } } } }' # 2. Configurar HorizontalPodAutoscaler kubectl apply -f - <<EOF apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: gitops-demo-hpa namespace: gitops-demo spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: gitops-demo minReplicas: 2 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 EOF # 3. Verificar quotas del namespace kubectl describe quota -n gitops-demo kubectl describe limitrange -n gitops-demo 5. Problemas de Certificados TLS \u00b6 S\u00edntomas \u00b6 Errores SSL/TLS al acceder a la aplicaci\u00f3n Certificados expirados o no v\u00e1lidos Navegador muestra advertencias de seguridad Diagn\u00f3stico \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 # Verificar certificados en el Ingress kubectl describe ingress gitops-demo -n gitops-demo # Verificar secretos TLS kubectl get secrets -n gitops-demo | grep tls kubectl describe secret gitops-demo-tls -n gitops-demo # Verificar cert-manager (si est\u00e1 instalado) kubectl get certificates -n gitops-demo kubectl describe certificate gitops-demo-tls -n gitops-demo # Probar conectividad TLS openssl s_client -connect gitops-demo.example.com:443 -servername gitops-demo.example.com Soluciones \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 1. Regenerar certificado con cert-manager kubectl delete certificate gitops-demo-tls -n gitops-demo kubectl apply -f - <<EOF apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: gitops-demo-tls namespace: gitops-demo spec: secretName: gitops-demo-tls issuerRef: name: letsencrypt-prod kind: ClusterIssuer dnsNames: - gitops-demo.example.com EOF # 2. Verificar el ClusterIssuer kubectl describe clusterissuer letsencrypt-prod # 3. Verificar logs de cert-manager kubectl logs -n cert-manager -l app = cert-manager Problemas de GitHub Actions \u00b6 1. Pipeline falla en el build de Docker \u00b6 S\u00edntomas \u00b6 Error \"no space left on device\" Timeout en docker build Error de autenticaci\u00f3n con el registry Diagn\u00f3stico y Soluciones \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 1. Limpiar espacio en disco - name: Clean up Docker run: | docker system prune -a -f docker volume prune -f df -h # 2. Usar BuildKit con cach\u00e9 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 with: buildkitd-flags: --debug - name: Build with cache uses: docker/build-push-action@v5 with: cache-from: type = gha cache-to: type = gha,mode = max # 3. Verificar autenticaci\u00f3n - name: Log in to Container Registry uses: docker/login-action@v3 with: registry: ghcr.io username: ${ { github.actor } } password: ${ { secrets.GITHUB_TOKEN } } 2. Tests fallan intermitentemente \u00b6 S\u00edntomas \u00b6 Tests pasan localmente pero fallan en CI Errores de timeout o race conditions Dependencias externas no disponibles Soluciones \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 1. Agregar retry logic - name: Run tests with retry uses: nick-invision/retry@v2 with: timeout_minutes: 10 max_attempts: 3 command: npm test # 2. Usar servicios containerizados services: redis: image: redis:alpine ports: - 6379 :6379 postgres: image: postgres:13 env: POSTGRES_PASSWORD: test ports: - 5432 :5432 # 3. Configurar timeouts adecuados - name: Run tests run: npm test env: TEST_TIMEOUT: 30000 NODE_ENV: test Problemas de Monitoreo \u00b6 1. M\u00e9tricas no disponibles \u00b6 Diagn\u00f3stico \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Verificar ServiceMonitor kubectl get servicemonitor -n gitops-demo kubectl describe servicemonitor gitops-demo -n gitops-demo # Verificar endpoints de m\u00e9tricas kubectl get endpoints -n gitops-demo curl -s http://<pod-ip>:8080/metrics # Verificar configuraci\u00f3n de Prometheus kubectl get prometheus -n monitoring kubectl logs -n monitoring -l app = prometheus Soluciones \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # 1. Verificar anotaciones de Prometheus kubectl patch deployment gitops-demo -n gitops-demo -p '{ \"spec\": { \"template\": { \"metadata\": { \"annotations\": { \"prometheus.io/scrape\": \"true\", \"prometheus.io/port\": \"8080\", \"prometheus.io/path\": \"/metrics\" } } } } }' # 2. Crear ServiceMonitor manualmente kubectl apply -f - <<EOF apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: gitops-demo namespace: gitops-demo spec: selector: matchLabels: app: gitops-demo endpoints: - port: http path: /metrics EOF Scripts de Debugging \u00b6 debug-deployment.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash NAMESPACE = ${ 1 :- gitops -demo } DEPLOYMENT = ${ 2 :- gitops -demo } echo \"=== Debugging deployment $DEPLOYMENT in namespace $NAMESPACE ===\" echo \"1. Deployment status:\" kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o wide echo -e \"\\n2. Deployment events:\" kubectl describe deployment $DEPLOYMENT -n $NAMESPACE | tail -20 echo -e \"\\n3. Pod status:\" kubectl get pods -l app = $DEPLOYMENT -n $NAMESPACE -o wide echo -e \"\\n4. Pod logs (last 50 lines):\" kubectl logs -l app = $DEPLOYMENT -n $NAMESPACE --tail = 50 echo -e \"\\n5. Service and endpoints:\" kubectl get svc,endpoints -l app = $DEPLOYMENT -n $NAMESPACE echo -e \"\\n6. Recent events:\" kubectl get events -n $NAMESPACE --sort-by = .metadata.creationTimestamp | tail -10 echo -e \"\\n7. Resource usage:\" kubectl top pods -n $NAMESPACE 2 >/dev/null || echo \"Metrics server not available\" check-argocd.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/bin/bash APP_NAME = ${ 1 :- gitops -demo } echo \"=== Checking ArgoCD application $APP_NAME ===\" echo \"1. Application status:\" argocd app get $APP_NAME echo -e \"\\n2. Application sync status:\" argocd app sync $APP_NAME --dry-run echo -e \"\\n3. Application diff:\" argocd app diff $APP_NAME echo -e \"\\n4. Application logs:\" argocd app logs $APP_NAME --tail = 20 echo -e \"\\n5. Repository connection:\" argocd repo get $( argocd app get $APP_NAME -o json | jq -r '.spec.source.repoURL' ) health-check.sh \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/bin/bash NAMESPACE = ${ 1 :- gitops -demo } SERVICE = ${ 2 :- gitops -demo } echo \"=== Health check for $SERVICE in $NAMESPACE ===\" # Port forward en background kubectl port-forward svc/ $SERVICE 8080 :80 -n $NAMESPACE & PF_PID = $! # Esperar que el port forward est\u00e9 listo sleep 3 echo \"1. Health endpoint:\" curl -s http://localhost:8080/health || echo \"Health endpoint not responding\" echo -e \"\\n2. Basic connectivity:\" curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080 || echo \"Service not responding\" echo -e \"\\n3. Response time:\" curl -s -o /dev/null -w \"%{time_total}s\\n\" http://localhost:8080 || echo \"Unable to measure response time\" # Limpiar port forward kill $PF_PID 2 >/dev/null echo -e \"\\n4. DNS resolution:\" kubectl exec -it deployment/ $SERVICE -n $NAMESPACE -- nslookup $SERVICE . $NAMESPACE .svc.cluster.local 2 >/dev/null || echo \"DNS resolution failed\" Logs y Observabilidad \u00b6 Centralizaci\u00f3n de Logs \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # Configurar Fluent Bit para recolecci\u00f3n de logs kubectl apply -f - <<EOF apiVersion: apps/v1 kind: DaemonSet metadata: name: fluent-bit namespace: gitops-demo spec: selector: matchLabels: app: fluent-bit template: metadata: labels: app: fluent-bit spec: containers: - name: fluent-bit image: fluent/fluent-bit:latest volumeMounts: - name: varlog mountPath: /var/log - name: config mountPath: /fluent-bit/etc volumes: - name: varlog hostPath: path: /var/log - name: config configMap: name: fluent-bit-config EOF Structured Logging \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Ejemplo de logging estructurado en la aplicaci\u00f3n const logger = require ( 'winston' ); logger . configure ({ format : winston . format . combine ( winston . format . timestamp (), winston . format . errors ({ stack : true }), winston . format . json () ), defaultMeta : { service : 'gitops-demo' , namespace : process . env . NAMESPACE || 'gitops-demo' , pod : process . env . HOSTNAME }, transports : [ new winston . transports . Console () ] }); // Uso en el c\u00f3digo logger . info ( 'Application started' , { port : process . env . PORT || 8080 , nodeVersion : process . version }); logger . error ( 'Database connection failed' , { error : err . message , stack : err . stack , connectionString : 'postgres://...' }); Alerting Rules \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Prometheus alerting rules apiVersion : monitoring.coreos.com/v1 kind : PrometheusRule metadata : name : gitops-demo-alerts namespace : gitops-demo spec : groups : - name : gitops-demo rules : - alert : GitOpsDemoDown expr : up{job=\"gitops-demo\"} == 0 for : 5m labels : severity : critical annotations : summary : \"GitOps Demo application is down\" description : \"GitOps Demo application has been down for more than 5 minutes\" - alert : GitOpsDemoHighErrorRate expr : rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1 for : 2m labels : severity : warning annotations : summary : \"High error rate detected\" description : \"Error rate is {{ $value }} errors per second\"","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting-guide","text":"","title":"Troubleshooting Guide"},{"location":"troubleshooting/#problemas-comunes-de-despliegue","text":"","title":"Problemas Comunes de Despliegue"},{"location":"troubleshooting/#1-imagen-docker-no-se-actualiza","text":"","title":"1. Imagen Docker no se actualiza"},{"location":"troubleshooting/#sintomas","text":"Los pods siguen ejecutando la versi\u00f3n anterior de la aplicaci\u00f3n ArgoCD muestra estado \"Synced\" pero la aplicaci\u00f3n no cambi\u00f3","title":"S\u00edntomas"},{"location":"troubleshooting/#diagnostico","text":"1 2 3 4 5 6 7 8 # Verificar la imagen actual en el deployment kubectl describe deployment gitops-demo -n gitops-demo | grep Image # Verificar la imagen en los pods kubectl get pods -n gitops-demo -o jsonpath = '{.items[*].spec.containers[*].image}' # Verificar el tag de la imagen en el registry docker manifest inspect ghcr.io/portfolio-jaime/gitops:latest","title":"Diagn\u00f3stico"},{"location":"troubleshooting/#soluciones","text":"1 2 3 4 5 6 7 8 9 # 1. Forzar recreaci\u00f3n de pods kubectl rollout restart deployment/gitops-demo -n gitops-demo # 2. Usar imagePullPolicy: Always kubectl patch deployment gitops-demo -n gitops-demo -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"webapp\",\"imagePullPolicy\":\"Always\"}]}}}}' # 3. Verificar que el tag de imagen sea \u00fanico # En el workflow de GitHub Actions, usar SHA en lugar de 'latest' sed -i \"s|image: .*|image: ghcr.io/portfolio-jaime/gitops: ${ GITHUB_SHA } |\" Kubernetes/deployment.yaml","title":"Soluciones"},{"location":"troubleshooting/#2-argocd-no-sincroniza-automaticamente","text":"","title":"2. ArgoCD no sincroniza autom\u00e1ticamente"},{"location":"troubleshooting/#sintomas_1","text":"Los cambios en Git no se reflejan en el cluster ArgoCD muestra \"OutOfSync\" pero no sincroniza autom\u00e1ticamente","title":"S\u00edntomas"},{"location":"troubleshooting/#diagnostico_1","text":"1 2 3 4 5 6 7 8 9 # Verificar el estado de la aplicaci\u00f3n argocd app get gitops-demo # Verificar los webhooks de GitHub curl -s -H \"Authorization: token $GITHUB_TOKEN \" \\ https://api.github.com/repos/Portfolio-jaime/GitOps/hooks # Verificar logs de ArgoCD kubectl logs -n argocd -l app.kubernetes.io/name = argocd-application-controller","title":"Diagn\u00f3stico"},{"location":"troubleshooting/#soluciones_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 1. Verificar configuraci\u00f3n de sync policy kubectl patch application gitops-demo -n argocd --type = 'merge' -p = '{ \"spec\": { \"syncPolicy\": { \"automated\": { \"prune\": true, \"selfHeal\": true } } } }' # 2. Sincronizaci\u00f3n manual argocd app sync gitops-demo # 3. Refresh manual de la aplicaci\u00f3n argocd app get gitops-demo --refresh # 4. Verificar permisos del repositorio argocd repo get https://github.com/Portfolio-jaime/GitOps.git","title":"Soluciones"},{"location":"troubleshooting/#3-problemas-de-red-y-conectividad","text":"","title":"3. Problemas de Red y Conectividad"},{"location":"troubleshooting/#sintomas_2","text":"Pods no pueden conectarse entre s\u00ed Aplicaci\u00f3n no responde desde el exterior Timeouts en health checks","title":"S\u00edntomas"},{"location":"troubleshooting/#diagnostico_2","text":"1 2 3 4 5 6 7 8 9 10 11 # Verificar estado de los pods kubectl get pods -n gitops-demo -o wide # Verificar servicios y endpoints kubectl get svc,endpoints -n gitops-demo # Probar conectividad desde dentro del cluster kubectl exec -it deployment/gitops-demo -n gitops-demo -- wget -qO- http://localhost:8080/health # Verificar Network Policies kubectl get networkpolicy -n gitops-demo","title":"Diagn\u00f3stico"},{"location":"troubleshooting/#soluciones_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 1. Verificar configuraci\u00f3n del Service kubectl describe service gitops-demo -n gitops-demo # 2. Verificar selectors del Service kubectl get pods -n gitops-demo --show-labels kubectl describe service gitops-demo -n gitops-demo | grep Selector # 3. Probar port-forward directo kubectl port-forward deployment/gitops-demo 8080 :8080 -n gitops-demo # 4. Verificar Ingress (si est\u00e1 configurado) kubectl describe ingress gitops-demo -n gitops-demo # 5. Verificar DNS interno kubectl exec -it deployment/gitops-demo -n gitops-demo -- nslookup gitops-demo.gitops-demo.svc.cluster.local","title":"Soluciones"},{"location":"troubleshooting/#4-problemas-de-recursos","text":"","title":"4. Problemas de Recursos"},{"location":"troubleshooting/#sintomas_3","text":"Pods en estado \"Pending\" o \"CrashLoopBackOff\" Pods reinici\u00e1ndose frecuentemente Performance degradada de la aplicaci\u00f3n","title":"S\u00edntomas"},{"location":"troubleshooting/#diagnostico_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 # Verificar recursos del cluster kubectl top nodes kubectl top pods -n gitops-demo # Verificar eventos del namespace kubectl get events -n gitops-demo --sort-by = .metadata.creationTimestamp # Verificar l\u00edmites de recursos kubectl describe deployment gitops-demo -n gitops-demo | grep -A 10 \"Limits\\|Requests\" # Verificar estado de los pods kubectl describe pods -n gitops-demo","title":"Diagn\u00f3stico"},{"location":"troubleshooting/#soluciones_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # 1. Ajustar requests y limits de CPU/memoria kubectl patch deployment gitops-demo -n gitops-demo -p '{ \"spec\": { \"template\": { \"spec\": { \"containers\": [{ \"name\": \"webapp\", \"resources\": { \"requests\": { \"cpu\": \"100m\", \"memory\": \"128Mi\" }, \"limits\": { \"cpu\": \"500m\", \"memory\": \"256Mi\" } } }] } } } }' # 2. Configurar HorizontalPodAutoscaler kubectl apply -f - <<EOF apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: gitops-demo-hpa namespace: gitops-demo spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: gitops-demo minReplicas: 2 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 EOF # 3. Verificar quotas del namespace kubectl describe quota -n gitops-demo kubectl describe limitrange -n gitops-demo","title":"Soluciones"},{"location":"troubleshooting/#5-problemas-de-certificados-tls","text":"","title":"5. Problemas de Certificados TLS"},{"location":"troubleshooting/#sintomas_4","text":"Errores SSL/TLS al acceder a la aplicaci\u00f3n Certificados expirados o no v\u00e1lidos Navegador muestra advertencias de seguridad","title":"S\u00edntomas"},{"location":"troubleshooting/#diagnostico_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 # Verificar certificados en el Ingress kubectl describe ingress gitops-demo -n gitops-demo # Verificar secretos TLS kubectl get secrets -n gitops-demo | grep tls kubectl describe secret gitops-demo-tls -n gitops-demo # Verificar cert-manager (si est\u00e1 instalado) kubectl get certificates -n gitops-demo kubectl describe certificate gitops-demo-tls -n gitops-demo # Probar conectividad TLS openssl s_client -connect gitops-demo.example.com:443 -servername gitops-demo.example.com","title":"Diagn\u00f3stico"},{"location":"troubleshooting/#soluciones_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # 1. Regenerar certificado con cert-manager kubectl delete certificate gitops-demo-tls -n gitops-demo kubectl apply -f - <<EOF apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: gitops-demo-tls namespace: gitops-demo spec: secretName: gitops-demo-tls issuerRef: name: letsencrypt-prod kind: ClusterIssuer dnsNames: - gitops-demo.example.com EOF # 2. Verificar el ClusterIssuer kubectl describe clusterissuer letsencrypt-prod # 3. Verificar logs de cert-manager kubectl logs -n cert-manager -l app = cert-manager","title":"Soluciones"},{"location":"troubleshooting/#problemas-de-github-actions","text":"","title":"Problemas de GitHub Actions"},{"location":"troubleshooting/#1-pipeline-falla-en-el-build-de-docker","text":"","title":"1. Pipeline falla en el build de Docker"},{"location":"troubleshooting/#sintomas_5","text":"Error \"no space left on device\" Timeout en docker build Error de autenticaci\u00f3n con el registry","title":"S\u00edntomas"},{"location":"troubleshooting/#diagnostico-y-soluciones","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 1. Limpiar espacio en disco - name: Clean up Docker run: | docker system prune -a -f docker volume prune -f df -h # 2. Usar BuildKit con cach\u00e9 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v3 with: buildkitd-flags: --debug - name: Build with cache uses: docker/build-push-action@v5 with: cache-from: type = gha cache-to: type = gha,mode = max # 3. Verificar autenticaci\u00f3n - name: Log in to Container Registry uses: docker/login-action@v3 with: registry: ghcr.io username: ${ { github.actor } } password: ${ { secrets.GITHUB_TOKEN } }","title":"Diagn\u00f3stico y Soluciones"},{"location":"troubleshooting/#2-tests-fallan-intermitentemente","text":"","title":"2. Tests fallan intermitentemente"},{"location":"troubleshooting/#sintomas_6","text":"Tests pasan localmente pero fallan en CI Errores de timeout o race conditions Dependencias externas no disponibles","title":"S\u00edntomas"},{"location":"troubleshooting/#soluciones_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 1. Agregar retry logic - name: Run tests with retry uses: nick-invision/retry@v2 with: timeout_minutes: 10 max_attempts: 3 command: npm test # 2. Usar servicios containerizados services: redis: image: redis:alpine ports: - 6379 :6379 postgres: image: postgres:13 env: POSTGRES_PASSWORD: test ports: - 5432 :5432 # 3. Configurar timeouts adecuados - name: Run tests run: npm test env: TEST_TIMEOUT: 30000 NODE_ENV: test","title":"Soluciones"},{"location":"troubleshooting/#problemas-de-monitoreo","text":"","title":"Problemas de Monitoreo"},{"location":"troubleshooting/#1-metricas-no-disponibles","text":"","title":"1. M\u00e9tricas no disponibles"},{"location":"troubleshooting/#diagnostico_5","text":"1 2 3 4 5 6 7 8 9 10 11 # Verificar ServiceMonitor kubectl get servicemonitor -n gitops-demo kubectl describe servicemonitor gitops-demo -n gitops-demo # Verificar endpoints de m\u00e9tricas kubectl get endpoints -n gitops-demo curl -s http://<pod-ip>:8080/metrics # Verificar configuraci\u00f3n de Prometheus kubectl get prometheus -n monitoring kubectl logs -n monitoring -l app = prometheus","title":"Diagn\u00f3stico"},{"location":"troubleshooting/#soluciones_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # 1. Verificar anotaciones de Prometheus kubectl patch deployment gitops-demo -n gitops-demo -p '{ \"spec\": { \"template\": { \"metadata\": { \"annotations\": { \"prometheus.io/scrape\": \"true\", \"prometheus.io/port\": \"8080\", \"prometheus.io/path\": \"/metrics\" } } } } }' # 2. Crear ServiceMonitor manualmente kubectl apply -f - <<EOF apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: gitops-demo namespace: gitops-demo spec: selector: matchLabels: app: gitops-demo endpoints: - port: http path: /metrics EOF","title":"Soluciones"},{"location":"troubleshooting/#scripts-de-debugging","text":"","title":"Scripts de Debugging"},{"location":"troubleshooting/#debug-deploymentsh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash NAMESPACE = ${ 1 :- gitops -demo } DEPLOYMENT = ${ 2 :- gitops -demo } echo \"=== Debugging deployment $DEPLOYMENT in namespace $NAMESPACE ===\" echo \"1. Deployment status:\" kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o wide echo -e \"\\n2. Deployment events:\" kubectl describe deployment $DEPLOYMENT -n $NAMESPACE | tail -20 echo -e \"\\n3. Pod status:\" kubectl get pods -l app = $DEPLOYMENT -n $NAMESPACE -o wide echo -e \"\\n4. Pod logs (last 50 lines):\" kubectl logs -l app = $DEPLOYMENT -n $NAMESPACE --tail = 50 echo -e \"\\n5. Service and endpoints:\" kubectl get svc,endpoints -l app = $DEPLOYMENT -n $NAMESPACE echo -e \"\\n6. Recent events:\" kubectl get events -n $NAMESPACE --sort-by = .metadata.creationTimestamp | tail -10 echo -e \"\\n7. Resource usage:\" kubectl top pods -n $NAMESPACE 2 >/dev/null || echo \"Metrics server not available\"","title":"debug-deployment.sh"},{"location":"troubleshooting/#check-argocdsh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/bin/bash APP_NAME = ${ 1 :- gitops -demo } echo \"=== Checking ArgoCD application $APP_NAME ===\" echo \"1. Application status:\" argocd app get $APP_NAME echo -e \"\\n2. Application sync status:\" argocd app sync $APP_NAME --dry-run echo -e \"\\n3. Application diff:\" argocd app diff $APP_NAME echo -e \"\\n4. Application logs:\" argocd app logs $APP_NAME --tail = 20 echo -e \"\\n5. Repository connection:\" argocd repo get $( argocd app get $APP_NAME -o json | jq -r '.spec.source.repoURL' )","title":"check-argocd.sh"},{"location":"troubleshooting/#health-checksh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/bin/bash NAMESPACE = ${ 1 :- gitops -demo } SERVICE = ${ 2 :- gitops -demo } echo \"=== Health check for $SERVICE in $NAMESPACE ===\" # Port forward en background kubectl port-forward svc/ $SERVICE 8080 :80 -n $NAMESPACE & PF_PID = $! # Esperar que el port forward est\u00e9 listo sleep 3 echo \"1. Health endpoint:\" curl -s http://localhost:8080/health || echo \"Health endpoint not responding\" echo -e \"\\n2. Basic connectivity:\" curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080 || echo \"Service not responding\" echo -e \"\\n3. Response time:\" curl -s -o /dev/null -w \"%{time_total}s\\n\" http://localhost:8080 || echo \"Unable to measure response time\" # Limpiar port forward kill $PF_PID 2 >/dev/null echo -e \"\\n4. DNS resolution:\" kubectl exec -it deployment/ $SERVICE -n $NAMESPACE -- nslookup $SERVICE . $NAMESPACE .svc.cluster.local 2 >/dev/null || echo \"DNS resolution failed\"","title":"health-check.sh"},{"location":"troubleshooting/#logs-y-observabilidad","text":"","title":"Logs y Observabilidad"},{"location":"troubleshooting/#centralizacion-de-logs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # Configurar Fluent Bit para recolecci\u00f3n de logs kubectl apply -f - <<EOF apiVersion: apps/v1 kind: DaemonSet metadata: name: fluent-bit namespace: gitops-demo spec: selector: matchLabels: app: fluent-bit template: metadata: labels: app: fluent-bit spec: containers: - name: fluent-bit image: fluent/fluent-bit:latest volumeMounts: - name: varlog mountPath: /var/log - name: config mountPath: /fluent-bit/etc volumes: - name: varlog hostPath: path: /var/log - name: config configMap: name: fluent-bit-config EOF","title":"Centralizaci\u00f3n de Logs"},{"location":"troubleshooting/#structured-logging","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Ejemplo de logging estructurado en la aplicaci\u00f3n const logger = require ( 'winston' ); logger . configure ({ format : winston . format . combine ( winston . format . timestamp (), winston . format . errors ({ stack : true }), winston . format . json () ), defaultMeta : { service : 'gitops-demo' , namespace : process . env . NAMESPACE || 'gitops-demo' , pod : process . env . HOSTNAME }, transports : [ new winston . transports . Console () ] }); // Uso en el c\u00f3digo logger . info ( 'Application started' , { port : process . env . PORT || 8080 , nodeVersion : process . version }); logger . error ( 'Database connection failed' , { error : err . message , stack : err . stack , connectionString : 'postgres://...' });","title":"Structured Logging"},{"location":"troubleshooting/#alerting-rules","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Prometheus alerting rules apiVersion : monitoring.coreos.com/v1 kind : PrometheusRule metadata : name : gitops-demo-alerts namespace : gitops-demo spec : groups : - name : gitops-demo rules : - alert : GitOpsDemoDown expr : up{job=\"gitops-demo\"} == 0 for : 5m labels : severity : critical annotations : summary : \"GitOps Demo application is down\" description : \"GitOps Demo application has been down for more than 5 minutes\" - alert : GitOpsDemoHighErrorRate expr : rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1 for : 2m labels : severity : warning annotations : summary : \"High error rate detected\" description : \"Error rate is {{ $value }} errors per second\"","title":"Alerting Rules"}]}